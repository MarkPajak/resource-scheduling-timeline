(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
module.exports = {
  100: 'Continue',
  101: 'Switching Protocols',
  200: 'OK',
  201: 'Created',
  202: 'Accepted',
  203: 'Non-Authoritative Information',
  204: 'No Content',
  205: 'Reset Content',
  206: 'Partial Content',
  300: 'Multiple Choices',
  301: 'Moved Permanently',
  302: 'Found',
  303: 'See Other',
  304: 'Not Modified',
  305: 'Use Proxy',
  307: 'Temporary Redirect',
  400: 'Bad Request',
  401: 'Unauthorized',
  402: 'Payment Required',
  403: 'Forbidden',
  404: 'Not Found',
  405: 'Method Not Allowed',
  406: 'Not Acceptable',
  407: 'Proxy Authentication Required',
  408: 'Request Time-out',
  409: 'Conflict',
  410: 'Gone',
  411: 'Length Required',
  412: 'Precondition Failed',
  413: 'Request Entity Too Large',
  414: 'Request-URI Too Large',
  415: 'Unsupported Media Type',
  416: 'Requested Range not Satisfiable',
  417: 'Expectation Failed',
  422: 'Unprocessable Entity',
  429: 'Too Many Requests',
  500: 'Internal Server Error',
  501: 'Not Implemented',
  502: 'Bad Gateway',
  503: 'Service Unavailable',
  504: 'Gateway Time-out',
  505: 'HTTP Version not Supported',
  CONTINUE: 100,
  SWITCHING_PROTOCOLS: 101,
  OK: 200,
  CREATED: 201,
  ACCEPTED: 202,
  NON_AUTHORITATIVE_INFORMATION: 203,
  NO_CONTENT: 204,
  RESET_CONTENT: 205,
  PARTIAL_CONTENT: 206,
  MULTIPLE_CHOICES: 300,
  MOVED_PERMANENTLY: 301,
  FOUND: 302,
  SEE_OTHER: 303,
  NOT_MODIFIED: 304,
  USE_PROXY: 305,
  TEMPORARY_REDIRECT: 307,
  BAD_REQUEST: 400,
  UNAUTHORIZED: 401,
  PAYMENT_REQUIRED: 402,
  FORBIDDEN: 403,
  NOT_FOUND: 404,
  METHOD_NOT_ALLOWED: 405,
  NOT_ACCEPTABLE: 406,
  PROXY_AUTHENTICATION_REQUIRED: 407,
  REQUEST_TIMEOUT: 408,
  CONFLICT: 409,
  GONE: 410,
  LENGTH_REQUIRED: 411,
  PRECONDITION_FAILED: 412,
  REQUEST_ENTITY_TOO_LARGE: 413,
  REQUEST_URI_TOO_LONG: 414,
  UNSUPPORTED_MEDIA_TYPE: 415,
  REQUESTED_RANGE_NOT_SATISFIABLE: 416,
  EXPECTATION_FAILED: 417,
  UNPROCESSABLE_ENTITY: 422,
  TOO_MANY_REQUESTS: 429,
  INTERNAL_SERVER_ERROR: 500,
  NOT_IMPLEMENTED: 501,
  BAD_GATEWAY: 502,
  SERVICE_UNAVAILABLE: 503,
  GATEWAY_TIMEOUT: 504,
  HTTP_VERSION_NOT_SUPPORTED: 505
};

},{}],2:[function(require,module,exports){
exports.boardCtrl = function($scope, $http, $q, $routeParams, $location,
        screen_saver_loop, $location, $rootScope, detect_dragging, trello, get_trello_board, date_calc, Todos, Tallys,Team
    ) {



    $scope.team = ["Zahid", "Tom", "Fay", "Mark", "Darren", "Lacey", "David"];
	  $scope.chart_title="Leader Board"
	$scope.labels= $scope.team
    
		$scope.removeTally = function(id) {
			Tallys.remove({id:id})
		}
		  Tallys.query({}, function(team) {
			_.each(team, function(row) {
				//$scope.removeTally(row._id)
				})	
			})	
			
			
 trello.auth()
 
 
 		
 
 
    var series_a = []
	_series = [];
	__series = [];
	
	$scope.series = [];

		_.each($scope.team, function(member) {
       _series[member] = []
    })
	
	
	var plot_graph = function() {

    var _data = []
	 var _series = []
		_.each($scope.team, function(member) {
        _series[member] = []
    })
	

	
   
	
    Tallys.query({}, function(tallys) {
		
		tallys.sort(function(a, b){
		return a.date + b.date;
		});

		
        _.each(tallys, function(row) {			
			
            for (var member in _series) {
                if (_series.hasOwnProperty(member)) {
				if(row.name){
                    if (row.name.toLowerCase() == member.toLowerCase()) {
                        _series[member].push({
                            x: row.date,
                            y: row.points
                        })
                    }
					}
                }
			
            }


        })
		

    })
	
	
	

    for (var member in _series) {
        if (_series.hasOwnProperty(member)) {
            _data.push(_series[member]);
        }
    }
	
	$scope.data=_data
	
	}
  
  for (var member in _series) {
        if (_series.hasOwnProperty(member)) {
            __series.push(member);
        }
    }
	
	$scope.series= __series
  

 
    $scope.datasetOverride = [{
        yAxisID: 'y-axis-1'
    }];
    $scope.options = {
		
        scales: {
            xAxes: [{
                type: 'time',
                unit: 'day',
                unitStepSize: 1,
                time: {
                    displayFormats: {
                        'day': 'MMM DD'
                    }
                }
            }],
            yAxes: [{
                    id: 'y-axis-1',
                    type: 'linear',
                    display: true,
                    position: 'left'
                }
            ]
        }
    };
	
	var count = 0
	$scope.loadMoreShots = function(count,display_data) {

		angular.forEach(display_data, function(list, index) {
						
		get_trello_board.get_data(list)

				   .then(function() {
					  count++
				if(display_data.length==count+1){
	
				   $scope.listscores()
					 plot_graph()
				}

				   });
				   
	})

};

	
	
        //trello.auth()
$scope.loadMoreShots(0,$rootScope['team'])

setInterval(function(){$scope.loadMoreShots(0,$rootScope['team']); }, 1 *250 * 1000);


        //  $scope.kiosk = app_settings.kiosk || "null"
        // $scope.call_to_action = app_settings.call_to_action
        kiosk_path = $routeParams.kiosk
            //  screensaver = app_settings.screensaver //services
        screensaver = ""
        $scope.start_screen_saver = function() {
           // screen_saver_loop.start_screen_saver()

        };
        $scope.functionThatReturnsStyle = function() {
            // return app_functons.functionThatReturnsStyle($routeParams.kiosk)

        };
        $scope.changeheadingcolor = function() {
            // return app_functons.changeheadingcolor($routeParams.kiosk)

        };
        if ($rootScope.screensaver_on != true) {
            console.log('start screensaver')
           // screen_saver_loop.start_screen_saver();
        }

     
		
			$scope.lists = []
			
				
	$scope.listscores = function() {	
		$scope._lists = []
		   Team.query({}, function(team) {
				_.each(team, function(row) {
								list=[]
								list.title = row.name
								list.average = row.penalty
								list.age = (10-1/(row.penalty)*10 ).toFixed(0)
								list.tint = row.penalty / 100
								list.card_count = row.card_count
								list.points = row.score  //(row.card_count / (row.penalty + 1)).toFixed(1)	
							$scope._lists.push(list)
				})
				$scope.lists=$scope._lists
				
		})
		
	}

		
			
	
}
},{}],3:[function(require,module,exports){
exports.deadCtrl = function($scope, $http, $q, $routeParams, $location,
        screen_saver_loop, $location, $rootScope, detect_dragging, trello, get_trello_board, date_calc, Todos, Tallys,Team,kiosk_activity
    ) {



   
	 $scope.machine_types = [];
	
	 


  $scope.changedValue = function(type) {
			$scope.data=[]
			$scope.series=[]
			$scope.category=[]
			$scope.type=type
			plot_graph()			 
 }   

  $scope.machine_types = ['apple', 'orange', 'pear', 'naartjie'];

  // selected fruits
  $scope.machine_types_selection = ['apple', 'pear'];

  // toggle selection for a given fruit by name
  $scope.toggleSelection = function toggleSelection(type) {
    var idx = $scope.machine_types_selection.indexOf(type);

    // is currently selected
    if (idx > -1) {
      $scope.machine_types_selection.splice(idx, 1);
	  plot_graph()
    }

    // is newly selected
    else {
      $scope.machine_types_selection.push(type);
	  
			
			
			plot_graph()
    }
  }; 

  $scope.changedCatValue = function(category) {
						 
 }  


  $scope.categories = [];

  // selected fruits
  $scope.category_selection = [];

  // toggle selection for a given fruit by name
  $scope.toggleCatSelection = function toggleSelection(type) {
    var idx = $scope.category_selection.indexOf(type);

    // is currently selected
    if (idx > -1) {
      $scope.category_selection.splice(idx, 1);
	  plot_graph()
    }

    // is newly selected
    else {
      $scope.category_selection.push(type);
	  
			$scope.data=[]
			$scope.series=[]
			$scope._series=[]
			
			plot_graph()
    }
  }; 

    
  $scope.changedCatValue = function(category) {
						 
 }

    $scope.data = []
    $scope.team = [];
	$scope.labels= $scope.team
  $scope.chart_title="Machine activity"

    var series_a = []
	
	var plot_graph = function() {
	
			$scope.data=[]
			$scope.series=[]
			$scope._series=[]
		
		 kiosk_activity.async_all($scope.category_selection).then(function(data) { //2. so you can use .then()
		 
		 		console.log('data',data)
	$scope.listscores(data.data['off_today'])
	$scope.listslivecores(data.data['on_today'])	
				
				
			})				
	}

    plot_graph() 
		$scope.live_lists = []
	
		$scope.listslivecores = function(list) {	
		console.log('list',list)
		 
				_.each(list, function(row) {
					
					console.log(row)
								list=[]
								list.title = row.kiosk
								list.average = row.penalty
								list.age = (10-1/(row.penalty)*10 ).toFixed(0)
								list.tint = row.penalty / 100
								list.card_count = row.card_count
								list.points = row.score  //(row.card_count / (row.penalty + 1)).toFixed(1)	
							$scope.live_lists.push(list)
				})
		
		
	}
		$scope.lists=[]
	$scope.listscores = function(list) {	
		console.log('list',list)
		 
				_.each(list, function(row) {
					
					//console.log(row)
								list=[]
								list.title = row.kiosk
								list.average = row.penalty
								list.age = (10-1/(row.penalty)*10 ).toFixed(0)
								list.tint = row.penalty / 100
								list.card_count = row.card_count
								list.points = row.score  //(row.card_count / (row.penalty + 1)).toFixed(1)	
							$scope.lists.push(list)
				})
		
		
	}

				
	
}
},{}],4:[function(require,module,exports){
exports.downtimeCtrl = function($scope, $http, $q, $routeParams, $location,
        screen_saver_loop, $location, $rootScope, detect_dragging, trello, get_trello_board, date_calc, Todos, Tallys,Team,kiosk_activity
    ) {


console.log('controller load')

var REFERENCE = moment(); // fixed just for testing, use moment();
 $scope.TODAY = REFERENCE.clone().startOf('day');
	$scope.YESTERDAY = REFERENCE.clone().subtract(0, 'days').startOf('day');
	$scope.A_WEEK_OLD = REFERENCE.clone().subtract(7, 'days').startOf('day');



   	$scope.datePicker=[];
	$scope.datePicker.date = {startDate: $scope.A_WEEK_OLD._d, endDate: $scope.TODAY._d};


$scope.machine_types = [];
$scope.type="all";
$scope.changedValue = function(type) {
			$scope.data=[]
			$scope.series=[]
			$scope.category=[]
			$scope.type=type
			plot_graph()			 
 }   


$scope.machinesx=$scope.kiosk = $routeParams.kiosk ||["all"]
$scope.filterCondition = {
        machine: 'neq'
}
$scope.$watch('type', function(type) {
$scope.machinesx=["all"]
	plot_graph('type')

})	
	  
$scope.$watch('daterangepicker.dates', function() {
console.log('daterangepicker')
	plot_graph()
})

	  

$scope.$watch('machine', function() {

			
			plot_graph('machine')	
})
  // selected fruits
  $scope.machine_types_selection = [];



  $scope.categories = [];

  // selected fruits
  $scope.category_selection = [];

 

 
var _data=[];
    $scope.data = []
	$scope.day_data=[]
    $scope.team = [];
	$scope.labels= $scope.team
  $scope.chart_title="Machine activity"

    var series_a = []
	
	var firstTime=true
	
	
	
	
	
	var plot_graph = function(mode) {
	$scope.data=[];
	$scope.series=[];
	$scope.day_series=[];
	$scope._series=[];
	$scope.week_day_series=[];
	
	if(!mode){
	$scope.machinesx=[]	
}	


$scope.categories=[]

		 kiosk_activity.async_all($scope.categories,$scope.machine_types,$scope.datePicker.date).then(function(data) { //2. so you can use .then()
		 				
				_.each(data.data['kiosk_list'], function(data) {
					//if(firstTime==true){
					
					
					
					if(($scope.type=="all") || ($scope.type==data.type && mode!="machine")){
						//$scope.machine_types=[]
						
						$scope.machinesx.push(data.kiosk)
					}
					//}
						
					if($scope.type=="all" ||$scope.type==data.type){
								if($scope.machine=="all" ||$scope.machine==data.kiosk){
										$scope._series[data.kiosk] = []
										$scope.week_day_series[data.kiosk] = []
										
								}
					}
						 				 
				})	
	 
			_.each(data.data['machine_types'], function(data) {
				if(firstTime==true){
					$scope.machine_types.push(data.machine_type)
					}
				
				})	
				
				firstTime=false
				 $scope.categories=[]
				
					_.each(data.data['categories'], function(data) {
					
					 $scope.categories.push(data.category)
				})	
				
				  _.each(data.data['all'], function(row) {
					  
						if($scope._series[row.kiosk]){
							$scope._series[row.kiosk].push({
								x: row.date,
								y: row.count
							})
							}
							
							
				})
				$scope.week_days=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"]
				
				_.each( $scope.week_days, function(day_of_week) {
				  _.each(data.data['week_day'], function(row) {
					  
						if($scope.week_day_series[row.kiosk] && (row.kiosk==$scope.machine || $scope.machine=="all")){
							
							
								if(row.date==day_of_week){								
									$scope.week_day_series[row.kiosk].push(	row.count)
								}
							
						}
							
						})	
							
				})

				  for (var member in $scope._series) {
						if ($scope._series.hasOwnProperty(member)) {
						
							$scope.series.push(member);
						}
					}

					for (var member in $scope._series) {
						if ($scope._series.hasOwnProperty(member)) {

							$scope.data.push($scope._series[member]);
						}
					}	

				
_data=[]
					for (var member in $scope.week_day_series) {
					
						if ($scope.week_day_series.hasOwnProperty(member)) {
						$scope.day_series.push(member);

							_data.push( $scope.week_day_series[member])
							
						}
					}

  					$scope.day_labels = $scope.week_days;
					$scope.day_data = _data
					
			})				
	}

		
$scope.day_onClick = function(points, evt) {
       // console.log(points, evt);
    };
    $scope.day_datasetOverride = [{
        yAxisID: 'y-axis-1'
    }];
   
	

  
  
  

    $scope.onClick = function(points, evt) {
       // console.log(points, evt);
    };
    $scope.datasetOverride = [{
        yAxisID: 'y-axis-1'
    }];
    $scope.options = {
	tension:0,
	 bezierCurve: false,
        scales: {
            xAxes: [{
                type: 'time',
                unit: 'hour',
				
                unitStepSize: 0.05,
                  time: {
        displayFormats: {
           'day': 'MMM DD'
        }
                }
            }],
            yAxes: [{
                    id: 'y-axis-1',
                    type: 'linear',
                    display: true,
                    position: 'left'
                }
            ]
        }
    };
	
	var count = 0


        //  $scope.kiosk = app_settings.kiosk || "null"
        // $scope.call_to_action = app_settings.call_to_action
        kiosk_path = $routeParams.kiosk
            //  screensaver = app_settings.screensaver //services
        screensaver = ""
        $scope.start_screen_saver = function() {
           // screen_saver_loop.start_screen_saver()

        };
        $scope.functionThatReturnsStyle = function() {
            // return app_functons.functionThatReturnsStyle($routeParams.kiosk)

        };
        $scope.changeheadingcolor = function() {
            // return app_functons.changeheadingcolor($routeParams.kiosk)

        };
        if ($rootScope.screensaver_on != true) {
           // console.log('start screensaver')
           // screen_saver_loop.start_screen_saver();
        }

     
		$scope.lists = []
		
	$scope.listscores = function(list) {	
		//console.log('list',list)
		 
				_.each(list, function(row) {
					
					//console.log(row)
								list=[]
								list.title = row.kiosk
								list.average = row.penalty
								list.age = (10-1/(row.penalty)*10 ).toFixed(0)
								list.tint = row.penalty / 100
								list.card_count = row.card_count
								list.points = row.score  //(row.card_count / (row.penalty + 1)).toFixed(1)	
							$scope.lists.push(list)
				})
		
		
	}

	 kiosk_activity.comments_all().then(function(data) { //2. so you can use .then()
	 
	  satisfact_pie(data)
	 })
	
		
	  function satisfact_pie(comments) {
     
               
				
				
				 $scope.kiosks=[]
				var series_a=[]
				var labels=[]
			
					$scope.pie_labels=[]
				$scope.pie_data=[]
				$scope.pie_options=[]
				$scope.datax=[]
				_.each(comments.data['satisfaction_tally'] , function( row) {
				
			
			if($scope.kiosks.indexOf(row.kiosk)==-1){
				$scope.kiosks.push(row.kiosk)
					series_a[row.kiosk]=[]
				$scope[row.kiosk]=[]
				labels[row.kiosk]=[]
				
				
			}
				
			
				
		
			
				series_a[row.kiosk].push( Math.round(row.count ))
				labels[row.kiosk].push( row.satisfaction )
				
				
				
				console.log(labels)
				})
			
				_.each($scope.kiosks , function( kiosk, i) {
					
					$scope.pie_labels[i] = labels[kiosk];
					$scope.datax[i] = series_a[kiosk];
					$scope.pie_options[i] = { legend: { display: false },
										tooltips: {
													enabled: true,
													mode: 'single',
													callbacks: {
														
														label: function(tooltipItems, data) { 
														
														var label =data.labels[tooltipItems.index]
															return label+ " " + data.datasets[0].data[tooltipItems.index] + '';
															
														}	
												
													}
										}
					}
		})

				
				
				
		}		
	
}
},{}],5:[function(require,module,exports){
exports.kiosk_activity = function ($http) {

	
  return {
    async_categories: function() {
      return $http.get('http://www.markpajak.co.uk/mark/kiosk-feedback/downtime.php');  //1. this returns promise
    },
	 async_all: function(categories,machine_types,dates) {
	 var categories=categories||""
	 var dates=dates||""
	 var machine_types=machine_types||""
	
	
	
      return $http.get('http://www.markpajak.co.uk/mark/kiosk-feedback/all_logs.php?categories='+JSON.stringify(categories)+'&machine_types='+JSON.stringify(machine_types)+'&dates='+JSON.stringify(dates));  //1. this returns promise
    },
	 comments_all: function() {
      return $http.get('http://www.markpajak.co.uk/mark/kiosk-feedback/all_comments.php');  //1. this returns promise
    }
  };
}

},{}],6:[function(require,module,exports){
exports.feedbackCtrl =    function($scope, $http, $q, $routeParams, $location,
        screen_saver_loop, $location, $rootScope, detect_dragging, trello, get_trello_board, date_calc, Todos, Tallys,Team,feedback
    ) {


var REFERENCE = moment(); // fixed just for testing, use moment();
$scope.TODAY = REFERENCE.clone().startOf('day');
$scope.YESTERDAY = REFERENCE.clone().subtract(1, 'days').startOf('day');
$scope.A_WEEK_OLD = REFERENCE.clone().subtract(2, 'days').startOf('day');
$scope.datePicker=[];
$scope.datePicker.date = {startDate: $scope.A_WEEK_OLD._d, endDate: $scope.TODAY._d};
$scope.machine_types = [];
$scope.type="INTERPRETATION-KIOSK";
$scope.feedback=[];
$scope.changedValue = function(type) {
			$scope.data=[]
			$scope.series=[]
			$scope.category=[]
			$scope.type=type
			plot_graph()			 
 }   

$scope.selected="all";
$scope.changeMachine = function(machine) {
			
			$scope.feedback=[];
			$scope.data=[];
			$scope.series=[];
			$scope.category=[];
			$scope.selected=machine;
			
			plot_graph(machine)	;		 
 }   




$scope.machinesx=["all"]
$scope.filterCondition = {
        machine: 'neq'
}
$scope.$watch('type', function(type) {
$scope.machinesx=["all"]
	//plot_graph('type')

})	
	  
$scope.$watch('datePicker', function() {
plot_graph();
})
	  


  // selected fruits
  $scope.machine_types_selection = [];



  $scope.categories = [];
  $scope.category_selection = [];

 

 
	var _data=[];
    $scope.data = []
	$scope.day_data=[]
    $scope.team = [];
	$scope.labels= $scope.team
  $scope.chart_title="KIOSK FEEDBACK"

    var series_a = []
	
	var firstTime=true
	
	$scope.satisfaction_count=0
				satisfied=[]
				satisfied.push("satisfied")
				satisfied.push("very satisfied")
	
	
	var plot_graph = function(mode) {
	$scope.data=[];
	$scope.series=[];
	$scope.day_series=[];
	$scope._series=[];
	$scope.week_day_series=[];
	
	if(!mode){
	$scope.machinesx=[]	
}	


$scope.categories=[]

		 feedback.feedback($scope.categories,$scope.datePicker.date).then(function(data) { //2. so you 
		 		
				  		$scope.machinesx.push("OVERALL SATISFACTION")
				_.each(data.data['kiosk_list'], function(data) {
					if($scope.type=="INTERPRETATION-KIOSK" && firstTime==true){
					mode="OVERALL SATISFACTION"
						$scope.machinesx.push(data.kiosk)
					}
												 
				})	
				firstTime=false
			
				
				_.each(data.data['all'], function(data) {
					if(data.description !="" && data.kiosk==$scope.selected){
					$scope.feedback.push(data)
					console.log(data.description)
					}
								 
				})
				
			satisfact_pie(data) 
			if(mode=="OVERALL SATISFACTION"){
			overall_satisfact_pie(data) 
			}

			})				
	}

		
$scope.day_onClick = function(points, evt) {
       // console.log(points, evt);
    };
    $scope.day_datasetOverride = [{
        yAxisID: 'y-axis-1'
    }];
   
	

  
  
  

    $scope.onClick = function(points, evt) {
       // console.log(points, evt);
    };
    $scope.datasetOverride = [{
        yAxisID: 'y-axis-1'
    }];
    $scope.options = {
	tension:0,
	 bezierCurve: false,
        scales: {
            xAxes: [{
                type: 'time',
                unit: 'hour',
				
                unitStepSize: 0.05,
                  time: {
        displayFormats: {
           'day': 'MMM DD'
        }
                }
            }],
            yAxes: [{
                    id: 'y-axis-1',
                    type: 'linear',
                    display: true,
                    position: 'left'
                }
            ]
        }
    };
	
	var count = 0


        //  $scope.kiosk = app_settings.kiosk || "null"
        // $scope.call_to_action = app_settings.call_to_action
        kiosk_path = $routeParams.kiosk
            //  screensaver = app_settings.screensaver //services
        screensaver = ""
        $scope.start_screen_saver = function() {
           // screen_saver_loop.start_screen_saver()

        };
        $scope.functionThatReturnsStyle = function() {
            // return app_functons.functionThatReturnsStyle($routeParams.kiosk)

        };
        $scope.changeheadingcolor = function() {
            // return app_functons.changeheadingcolor($routeParams.kiosk)

        };
        if ($rootScope.screensaver_on != true) {
          
        }

     
		$scope.lists = []
		
	$scope.listscores = function(list) {	
	
		 
				_.each(list, function(row) {
					
					
								list=[]
								list.title = row.kiosk
								list.average = row.penalty
								list.age = (10-1/(row.penalty)*10 ).toFixed(0)
								list.tint = row.penalty / 100
								list.card_count = row.card_count
								list.points = row.score  //(row.card_count / (row.penalty + 1)).toFixed(1)	
							$scope.lists.push(list)
				})
		
		
	}
	
		  function overall_satisfact_pie(comments) {
     
               $scope.kiosks=[]
			   $scope.kiosks.push("OVERALL SATISFACTION")
				$scope.machine = "OVERALL SATISFACTION"
				$scope.series_a=[]
				$scope.labels=[]
				$scope.series_a["OVERALL SATISFACTION"]=[]
				$scope.labels["OVERALL SATISFACTION"]=[]
				$scope.satisfaction_tally=0
				$scope.satisfaction_count=0
			_.each(comments.data['overall_satisfaction'] , function( row) {
$scope.satisfaction_tally+=Math.round(row.count )

				$scope.series_a["OVERALL SATISFACTION"].push( Math.round(row.count ))
				$scope.labels["OVERALL SATISFACTION"].push( row.satisfaction )
				
				
				
				if(satisfied.indexOf(row.satisfaction)!=-1)
				{
					$scope.satisfaction_count+=Math.round(row.count )
				}

					$scope.pie_labels.push( $scope.labels["OVERALL SATISFACTION"]);
					$scope.pie_data.push($scope.series_a["OVERALL SATISFACTION"]);

				
		})		
						
			$scope.percentage=Math.round(($scope.satisfaction_count/$scope.satisfaction_tally)*100)
			}


		
	  function satisfact_pie(comments) {
     
               
				
				
				 $scope.kiosks=[]
				$scope.series_a=[]
			$scope.labels=[]
			
				$scope.pie_labels=[]
				$scope.pie_data=[]
				$scope.pie_options=[]
				$scope.datax=[]
				$scope.satisfaction_count=0
				$scope.satisfaction_tally=0
				
			_.each(comments.data['satisfaction_tally'] , function( row) {
		
				if($scope.kiosks.indexOf(row.kiosk)==-1){
					if($scope.selected.indexOf(row.kiosk)!=-1){
						
						
						
						$scope.kiosks.push(row.kiosk)
						console.log('cats')
						$scope.series_a[row.kiosk]=[]
						$scope[row.kiosk]=[]
						$scope.labels[row.kiosk]=[]
					}
				}
				
				if($scope.selected.indexOf(row.kiosk)!=-1){
				$scope.series_a[row.kiosk].push( Math.round(row.count ))
				$scope.labels[row.kiosk].push( row.satisfaction )
				if(satisfied.indexOf(row.satisfaction)!=-1)
						{
						
							$scope.satisfaction_count+=Math.round(row.count )
						}
				$scope.satisfaction_tally+=Math.round(row.count )
				$scope.percentage=Math.round(($scope.satisfaction_count/$scope.satisfaction_tally)*100)
						
				}
				
			

				})
			
			
				
				
				
				_.each($scope.kiosks , function( kiosk, i) {
				
		
					$scope.machine = kiosk
					$scope.pie_labels[i] = $scope.labels[kiosk];
					$scope.pie_data[i] = $scope.series_a[kiosk];
					$scope.pie_options[i] = { legend: { display: true },
										tooltips: {
													enabled: true,
													mode: 'single',
													callbacks: {
														
														label: function(tooltipItems, data) { 
														
														var label =data.labels[tooltipItems.index]
															return label+ " " + data.datasets[0].data[tooltipItems.index] + '';
															
														}	
												
													}
										}
					}
		})

				
				
				
		}		
	
}
},{}],7:[function(require,module,exports){
exports.feedback =function ($http) {

  return {
    async_categories: function() {
      return $http.get('http://www.markpajak.co.uk/mark/kiosk-feedback/downtime.php');  //1. this returns promise
    },
	 async_all: function(categories,dates) {
	 var categories=categories||""
	 var dates=dates||""
	 var machine_types=machine_types||""
	
      return $http.get('http://www.markpajak.co.uk/mark/kiosk-feedback/all_logs.php?categories='+JSON.stringify(categories)+'&machine_types='+JSON.stringify(machine_types)+'&dates='+JSON.stringify(dates));  //1. this returns promise
    },
	
	
		 feedback: function(categories,machine_types,dates) {
	 var categories=categories||""
	 var dates=dates||""
	 var machine_types=machine_types||""
	
      return $http.get('http://www.markpajak.co.uk/mark/kiosk-feedback/all_comments.php?categories='+JSON.stringify(categories)+'&machine_types='+JSON.stringify(machine_types)+'&dates='+JSON.stringify(dates));  //1. this returns promise
    },
	 comments_all: function() {
      return $http.get('http://www.markpajak.co.uk/mark/kiosk-feedback/all_comments.php');  //1. this returns promise
    }
  };
}

},{}],8:[function(require,module,exports){
exports.member_controller =  function($scope, $http, $q, $routeParams, $location,
          $rootScope, date_calc, Tallys,Team,Timeline,$mdEditDialog
		,Leave,delete_leave_by_id
    ) {

$scope.me=$routeParams.member

$me_Data=[]

      Leave.query({}, function(team) {
            _.each(team, function(row,index) {
          
			
			
            })
        })


Team.query({}, function(team) {
            _.each(team, function(team,i) {
			
			if(team.username.toLowerCase()==$scope.me.toLowerCase()){
			console.log(team)
			
			
			number_days_leave_taken = 0
			
			function sortByKey(array, key) {
    return array.sort(function(a, b) {
        var x = a[key]; var y = b[key];
        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
    });
}

team.leave_taken = sortByKey(team.leave_taken, 'leave_start');

			
		 _.each(team.leave_taken, function(leave,w) {
	var leave_count=0
	if(leave._type=="Full Day"){
	leave_count=1
	}
	if(leave._type=="Half Day"){
	leave_count=0.5
	}
			 if(leave.start_date>=team.leave_start && leave.end_date<=team.leave_year_end){
				number_days_leave_taken+=(leave.weekday_duration)*leave_count
				team.leave_taken[w].tally=(team.number_days_leave-number_days_leave_taken)*leave_count
			 }
			 else
			{
			
				console.log(leave.start_date>=team.leave_start )
				console.log('leave.start_date'+leave.start_date )
				console.log('row.leave_start'+team.leave_start )
				
				console.log(leave.end_date<=team.leave_year_end)
				console.log('leave.end_date'+leave.end_date )
				console.log('row.leave_year_end'+team.leave_year_end )
					 
			}
	
		 })
		team.number_days_leave_remaining=team.number_days_leave-number_days_leave_taken
			
			
			$scope.me_Data=team
			}
			
})
 })


   $scope.removeLeave = function (event, dessert) {
  // if auto selection is enabled you will want to stop the event
  // from propagating and selecting the row
  event.stopPropagation();

  /* 
   * messages is commented out because there is a bug currently
   * with ngRepeat and ngMessages were the messages are always
   * displayed even if the error property on the ngModelController
   * is not set, I've included it anyway so you get the idea
   */

 // var promise = $mdEditDialog.small({

    //modelValue: dessert.comment,
    //placeholder: 'Add a comment',
   // save: function (input) {
//	event.target.innerHTML=input.$modelValue
	
	
	console.log(dessert)
	delete_leave_by_id._delete(dessert._id)
	/*
			var query = {'id':dessert._id};
			Team.update(query, {
					[event.target.attributes[0].nodeValue]:new Date(input.$modelValue)
					}, function(err, affected, resp) {
					console.log(resp)
			})
			*/
  /*
  promise.then(function (ctrl) {
    var input = ctrl.getInput();

    input.$viewChangeListeners.push(function () {
      input.$setValidity('test', input.$modelValue !== 'test');
    });
  });
  */
  }
  
  

	
	}

},{}],9:[function(require,module,exports){
exports.TallyController =  function($scope, Tallys) {


    $scope.editing = [];
    $scope.tallys = Tallys.query();

	
	
	
	
    $scope.save = function() {
        if (!$scope.newTally || $scope.newTally.length < 1) return;
        var tally = new Tallys({
            name: $scope.newTally,
            completed: false
        });

        tally.$save(function() {
            $scope.tallys.push(tally);
            $scope.newTally = ''; // clear textbox
        });
    }

    $scope.update = function(index) {
        var tally = $scope.todos[index];
        Tallys.update({
            id: tally._id
        }, tally);
        $scope.editing[index] = false;
    }

    $scope.edit = function(index) {
        $scope.editing[index] = angular.copy($scope.tallys[index]);
    }

    $scope.cancel = function(index) {
        $scope.tallys[index] = angular.copy($scope.editing[index]);
        $scope.editing[index] = false;
    }

    $scope.remove = function(index) {
        var tally = $scope.tallys[index];
        Tallys.remove({
            id: tally._id
        }, function() {
            $scope.tallys.splice(index, 1);
        });
    }
}
exports.TodoDetailCtrl =   function($scope, $routeParams, Todos, $location) {

    $scope.todo = Todos.get({
        id: $routeParams.id
    });

    $scope.remove = function() {
        Todos.remove({
            id: $scope.todo._id
        }, function() {
            $location.url('/');
        });
    }
}
exports.trello =   function($scope, $http, $q, $routeParams, $location,
        screen_saver_loop,  $rootScope, detect_dragging, trello, get_trello_board, date_calc, Todos, Tallys,Team
    ) {


        trello.auth()
		
		$scope.removeTeam = function(id) {
			Team.remove({id:id})
		}
		  Team.query({}, function(team) {
			_.each(team, function(row) {
				$scope.removeTeam(row._id)
				})	
			})	

	
	
		
				
        
        kiosk_path = $routeParams.kiosk
            //  screensaver = app_settings.screensaver //services
        screensaver = ""
        $scope.start_screen_saver = function() {
            screen_saver_loop.start_screen_saver()

        };
        $scope.functionThatReturnsStyle = function() {
            // return app_functons.functionThatReturnsStyle($routeParams.kiosk)

        };
        $scope.changeheadingcolor = function() {
            // return app_functons.changeheadingcolor($routeParams.kiosk)

        };
        if ($rootScope.screensaver_on != true) {
            console.log('start screensaver')
            screen_saver_loop.start_screen_saver();
        }

        console.log($routeParams.view)

        var display_data = $rootScope[$routeParams.view]




        $scope.lists = []
        loadMoreShots = function(display_data) {

            angular.forEach(display_data, function(list, index) {


                var promise = get_trello_board.get_data(list)
				
				.then(function(response) {
					cards=response.response
					console.log('cards',cards)
                    list._cards = []
                    tally = 0
                    card_count = 0

                    angular.forEach(cards, function(card, index) {
                        card_count++

                        card_to_print = {
                            name: card.name,
                            tint: 1 - date_calc.diffDays(card.dateLastActivity) / 10,
                            age: date_calc.diffDays(card.dateLastActivity).toString(),
                            dateLastActivity: card.dateLastActivity
                        }
                        tally += date_calc.diffDays(card.dateLastActivity)


                        list._cards.push(card_to_print)

                    });
				


                    list.average = (tally / card_count).toFixed(2)
                    list.tint = list.average / 100
                    list.card_count = card_count
                    list.points = (card_count / (list.average/1 + 1)).toFixed(2)
					console.log('card_count',card_count)
					console.log('list.average ',list.average )
					console.log('list.average ',(list.average + 1))
					console.log('list.points ',list.points)	
						
								 // (card_count / (list.average + 1)).toFixed(1)	
					
					var team = new Team({
					  name: list.title,
					  score:list.points,
					   card_count:card_count,
					  bonus:"",
					  penalty:list.average 
					});
					 team.$save(function() {                       
                        $scope.team.push(team);
                    });
					
                    var tally = new Tallys({
                        name: list.title,
                        date: new Date(),
                        points: list.points
                    });
                    $scope.tallys = Tallys.query();


                    tally.$save(function() {
                        console.log(tally)
                        $scope.tallys.push(tally);
                        $scope.newTodo = ''; // clear textbox
                    });


                    $scope.lists.push(list)
                })

            })
        }

        loadMoreShots(display_data)


        detect_dragging.drag_handler()
        $scope.go = function(path) {

            if ($rootScope.isDragging == false) {
                if (path > 0) {
                    $location.path("id/" + path + "/" + $routeParams.kiosk);
                    detect_dragging.drag_handler()
                } else {
                    //$location.path(path + "/" + $routeParams.kiosk);
                }
            }
        };


        $scope.pageClass = 'page-contact';

        $scope.save = function() {
            if (!$scope.newTally || $scope.newTally.length < 1) return;
            var tally = new Tallys({
                name: $scope.newTally,
                date: new Date()
            });

            tally.$save(function() {
               
                $scope.todos.push(tally);
                $scope.newTodo = ''; // clear textbox
            });
        }
    }
	
	
	

},{}],10:[function(require,module,exports){
exports.form_to_trellox =  function($scope, $http, $q, $routeParams, $location,
        screen_saver_loop,  $rootScope, detect_dragging, trello, get_trello_board, date_calc, Todos, Tallys,Team
    ) {



        trello.auth()
		
		console.log($rootScope.team)
		
		boards=[]
		
		 angular.forEach($rootScope.team, function(team,i) {
				 board={
				  "name": team.title,
				  "value": team.id
				  }
				 boards.push(board)
		 })
		
 $scope.form_to_trello = function (  ) {
 
    var vm = this;
    // funcation assignment
    vm.onSubmit = onSubmit;

    // variable assignment
    vm.author = { // optionally fill in your info below :-)
      name: '#',
      url: '#' // a link to your twitter/github/blog/whatever
    };
    vm.exampleTitle = 'Introduction';
    vm.env = {
      angularVersion: angular.version.full
    };

    vm.model = {
	  name: "",
	  file:"",
	  list_id:"",
	  description:""
    };
    vm.options = {
      formState: {
        awesomeIsForced: false
      }
    };
    
    vm.fields = [
     /*
	  {

                            type: 'radio',
                            key: 'satisfaction',							
                            templateOptions: {
                              label: "Explain the problem",  
                                
                                options: [
									 {
										"name": "very satisfied",
										"value": "very satisfied"
									  },
									  {
										"name": "satisfied",
										"value": "satisfied"
									  },
									  {
										"name": "neither satisfied nor disatisfied",
										"value": "neither satisfied nor disatisfied"
									  },
									  {
										"name": "disatisfied",
										"value": "disatisfied"
									  },
									  {
									  
										"name": "very disatisfied",
										"value": "very disatisfied"
									  }
                                ]
							}
	  },
	  */
	  {
        key: 'list_id',
        type: 'select',
        templateOptions:{
            label: 'Post to board',
            options: boards,
             }
		
		},
	  {
        key: 'name',
        type: 'textarea',
        templateOptions: {
          label: 'Task',
          placeholder: 'This will be the card name',
          description: ''
        },
        expressionProperties: {
          'templateOptions.focus': 'formState.awesomeIsForced',
          'templateOptions.description': function(viewValue, modelValue, scope) {
            if (scope.formState.awesomeIsForced) {
              return 'And look! This field magically got focus!';
            }
          }
        }
      },
	  {
        key: 'description',
        type: 'textarea',
        templateOptions: {
          label: 'Description',
          placeholder: 'This will be the card description',
          description: ''
        },
        expressionProperties: {
          'templateOptions.focus': 'formState.awesomeIsForced',
          'templateOptions.description': function(viewValue, modelValue, scope) {
            if (scope.formState.awesomeIsForced) {
              return 'And look! This field magically got focus!';
            }
          }
        }
      },
	    {
        key: 'file',
        type: 'file',
        templateOptions: {
          label: 'File',
          placeholder: 'This will be the card name',
          description: ''
        },
        expressionProperties: {
          'templateOptions.focus': 'formState.awesomeIsForced',
          'templateOptions.description': function(viewValue, modelValue, scope) {
            if (scope.formState.awesomeIsForced) {
              return 'And look! This field magically got focus!';
            }
          }
        }
      },
/*
      {
        key: 'awesome',
        type: 'checkbox',
        templateOptions: { label: '' },
        expressionProperties: {
          'templateOptions.disabled': 'formState.awesomeIsForced',
          'templateOptions.label': function(viewValue, modelValue, scope) {
            if (scope.formState.awesomeIsForced) {
              return 'Too bad, formly is really awesome...';
            } else {
              return 'Is formly totally awesome? (uncheck this and see what happens)';
            }
          }
        }
		
      },
	  
      {
        key: 'whyNot',
        type: 'textarea',
        expressionProperties: {
          'templateOptions.placeholder': function(viewValue, modelValue, scope) {
            if (scope.formState.awesomeIsForced) {
              return 'Too bad... It really is awesome! Wasn\'t that cool?';
            } else {
              return 'Type in here... I dare you';
            }
          },
          'templateOptions.disabled': 'formState.awesomeIsForced'
        },
        hideExpression: 'model.awesome',
        templateOptions: {
          label: 'Why Not?',
          placeholder: 'Type in here... I dare you'
        },
        watcher: {
          listener: function(field, newValue, oldValue, formScope, stopWatching) {
            if (newValue) {
              stopWatching();
              formScope.model.awesome = true;
			  formScope.model.satisfaction = undefined;
			  formScope.model.kiosk=app_settings.kiosk;
              formScope.model.whyNot = undefined;
              field.hideExpression = null;
              formScope.options.formState.awesomeIsForced = true;
            }
          }
        }
      },
	  */
     
      {
        key: 'exampleDirective',
        template: '<div example-directive></div>',
        templateOptions: {
          label: 'Example Directive',
        }
      }
    ];
// Setup
var TOKEN = "";
var KEY = "";
var CARD = "";
var FILE = "";
    // function definition
    function onSubmit() {
	
		formData=(vm.model);
		var myList = formData.list_id;
		var creationSuccess = function(data) {
		  console.log('Card created successfully. Data returned:' + JSON.stringify(data));
		
		if( exampleInputFile.files[0]){
				var formData = new FormData();

				  formData.append("token", Trello.token());
				  formData.append("key", Trello.key());

				formData.append("file", exampleInputFile.files[0]);
				console.log(formData)
				var request = new XMLHttpRequest();
				 request.open("POST", "https://api.trello.com/1/cards/" + data.id + "/attachments");
				  request.send(formData);
		
		vm.options.resetModel()		
		};
		}
			var error = function(err) {
		console.log(err.responseText)
		};
		
		var newCard = {
		  name: formData.name, 
		  file: formData.file, 
		  desc: formData.description,
		  // Place this card at the top of our list 
		  idList: myList,
		  pos: 'top'
		};
		console.log('Trello',Trello)
		Trello.post('/cards/', newCard, creationSuccess,error);  
		var trellokey=formData.key
var trelloroken=formData.token
	


    }  
 }
 
 

	
	}

},{}],11:[function(require,module,exports){
exports.leave_controller =  function($scope, $http, $q, $routeParams, $location,
          $rootScope, date_calc, Tallys,Team,Timeline
		,Leave
    ) {



  $scope.override=true
  $scope.ids_to_delete=[]
		
	function dateRangeOverlaps(a_start, a_end, b_start, b_end) {
    if (a_start <= b_start && b_start <= a_end) return true; // b starts in a
    if (a_start <= b_end   && b_end   <= a_end) return true; // b ends in a
    if (b_start <  a_start && a_end   <  b_end) return true; // a in b
    return false;
}
		
		$scope.datePicker=[];
		$scope.datePicker.date = {startDate: "", endDate: ""};
		$scope.dateRange = {
            startDate: null,
            endDate: null
        };
		check_dates=function(viewValue){
		 
		 var overlap = []
						if(viewValue!=""){
							Team.query({}, function(team) {
						_.each(team, function(_team,i) {
						
						_.each(_team.leave_taken, function(leave,i) {
							
							 
								
							
							StartDate1=		new Date(leave.start_date)
							EndDate1=		new Date(leave.end_date)
							StartDate2=		new Date($scope.datePicker.date.startDate._d)
							EndDate2=		new Date($scope.datePicker.date.endDate._d)
						
							
							if(dateRangeOverlaps(StartDate1, EndDate1, StartDate2, EndDate2)==true){
										
										
											overlap.type = leave._type
											overlap.name = leave.name
											overlap.id = leave._id
											overlap.group = moment(StartDate1).format("MMM Do YYYY")  +"-"+moment(EndDate1).format("MMM Do YYYY") 
											$scope.overlapalert.push(overlap)
										
							if(viewValue==_team._id){
							console.log('will be overwritten'+leave._id)
								$scope.ids_to_delete.push(overlap.id)
							 }
							
									
							 }
							 
							  })
							 
						   })
						   })
						   }
    }
		$scope.overlapalert=[]

		$scope.dateRangeOptions = {
        locale : {
            format : 'DD/MM/YYYY'
        },
        eventHandlers : {
            'apply.daterangepicker' : function() {  
      
				console.log("checking Dates"); 
$scope.overlapalert=[]
        Timeline.query({}, function(team) {
		
		
            _.each(team, function(row,index) {

		var timeline=(row);
		if(!row.end_date){row.end_date=row.start_date}
		
		StartDate1=		new Date(timeline.start_date)
		EndDate1=		new Date(timeline.end_date)
		
		StartDate2=		new Date($scope.datePicker.date.startDate._d)
		EndDate2=		new Date($scope.datePicker.date.endDate._d)
	
		
		
		if(dateRangeOverlaps(StartDate1, EndDate1, StartDate2, EndDate2)==true){
					console.log(row)
					var overlap = []
						overlap.type = row._type
						overlap.name = row.name
						overlap.group = row.group
						
						$scope.overlapalert.push(overlap)
		}
		

	
			
            })
        })				
				
            }
        }
    };
	
	
		
		boards=[]
		leave_type=[]
		leave_type.push({"name": "Full Day","value": "Full Day"})
		leave_type.push({"name": "Half Day","value":"Half Day"})
		leave_type.push({"name": "Flexi PM","value":"Flexi PM"})
		leave_type.push({"name": "Flexi AM","value":"Flexi AM"})
		leave_type.push({"name": "Flexi Day","value":"Flexi Day"})
		
		
		 Team.query({}, function(team) {
            _.each(team, function(team,i) {
		
				 board={
				  "name": team.username,
				  "value": team._id
				  }
				 boards.push(board)
		 })
		  })
		
		  check_names = function () {
				console.log('check names')
			
 
			}
		   $scope.override_button = function () {
				console.log('override')
				$scope.override=false
 
			}
		
 $scope.form_to_trello = function (  ) {
 
    var vm = this;
    // funcation assignment
    vm.onSubmit = onSubmit;

    // variable assignment
    vm.author = { // optionally fill in your info below :-)
      name: '#',
      url: '#' // a link to your twitter/github/blog/whatever
    };
    vm.exampleTitle = 'Introduction';
    vm.env = {
      angularVersion: angular.version.full
    };

    vm.model = {
	  username: "",
	  notes:"",
	  team:"",
	  start_date:"",
	  end_date:"",
	  _type:""
    };
 
    vm.fields = [
  
  
	  {
        key: 'username',
        type: 'select',
	 expressionProperties : {
       'templateOptions.onChange': function($viewValue, $modelValue, $scope) {
	   
	   
	  check_dates($viewValue)
	   
	   
       }},
        templateOptions:{
            label: 'Name',
            options: boards,
             }
		
		},
		  {
        key: '_type',
        type: 'select',
        templateOptions:{
            label: 'Type',
            options: leave_type,
             }
		
		},
	   
 
	  {
        key: 'notes',
        type: 'textarea',
        templateOptions: {
          label: 'Notes',
          placeholder: '',
          description: ''
        },
    
      }

  
    ];

	
	
    // function definition
    function onSubmit() {

		formData=(vm.model);
			console.log(formData)
		
		formData.start_date = moment($scope.datePicker.date.startDate._d).startOf('day')
		formData.end_date = moment($scope.datePicker.date.endDate._d)
		
		var leave = new Leave(formData);
		
	
			 Team.query({}, function(team) {
				_.each(team, function(_team,i) {
					
						if(_team._id==formData.username){
							
							leave.team_member= _team._id
							
												console.log ('before',team[i].leave_taken)
												new_leave=[]
											new_ids=[]	
											_.each(team[i].leave_taken, function(leave_me,index) {
											
													if( $scope.ids_to_delete.indexOf(leave_me._id)==-1 && new_ids.indexOf(leave_me._id)==-1){
														new_leave.push(leave_me	)	
														new_ids.push(	leave_me._id)													
													 }
												
											})
							
											team[i].leave_taken=new_leave
											leave.$save(function(resp) {
													console.log('response',resp) 
													team[i].leave_taken.push(resp._id);
										
								
											console.log ('after',team[i].leave_taken)
							
											Team.update({
											id:_team._id,				
											}, team[i]);
							
							
		 vm.options.resetModel()
		// $scope.datePicker.date=[]
		 $scope.overlapalert=[]
		 
						
           
            });
						}
				})
			})
	
			

   
	

    }  
 }
 
 

	
	}

},{}],12:[function(require,module,exports){
exports.team_controller =  function($scope, $http, $q, $routeParams, $location,
        screen_saver_loop,  $rootScope, detect_dragging, trello, get_trello_board, date_calc, Todos, Tallys,Team,Timeline,$mdEditDialog
    ) {



  $scope.rows = [];
  
  $scope.counter = 0;
  
  $scope.addRow = function() {
   var team = new Team({
                name:  $scope.counter
            });
			
	 team.$save(function() {
		
               
            });
  
    $scope.rows.push('Row ' + $scope.counter);
    $scope.counter++;
  }
  
  
     Team.query({}, function(team) {
	  _.each(team, function(row,index) {
		  
		
		  
		number_days_leave_taken = 0
		 _.each(row.leave_taken, function(leave) {
	
			 if(leave.start_date>=row.leave_start && leave.end_date<=row.leave_year_end){
				number_days_leave_taken+=leave.weekday_duration
			 }
			 else
			{
	
					 
			}
		 })
		row.number_days_leave_remaining=row.number_days_leave-number_days_leave_taken
		  
		$scope.rows.push(row)
		 $scope.counter++;
	 })
	 })
	 
	 
   $scope.editComment = function (event, dessert) {
  // if auto selection is enabled you will want to stop the event
  // from propagating and selecting the row
  event.stopPropagation();

  /* 
   * messages is commented out because there is a bug currently
   * with ngRepeat and ngMessages were the messages are always
   * displayed even if the error property on the ngModelController
   * is not set, I've included it anyway so you get the idea
   */

   
  var promise = $mdEditDialog.small({

    modelValue: dessert.comment,
    placeholder: 'Add a comment',
    save: function (input) {
	event.target.innerHTML=input.$modelValue
			var query = {'id':dessert._id};
			Team.update(query, {
					[event.target.attributes[0].nodeValue]:input.$modelValue
					}, function(err, affected, resp) {
					console.log(resp)
			})
    },
    targetEvent: event,
    validators: {
      'md-maxlength': 30
    }
  });
  promise.then(function (ctrl) {
    var input = ctrl.getInput();

    input.$viewChangeListeners.push(function () {
      input.$setValidity('test', input.$modelValue !== 'test');
    });
  });
  }
  }

  

},{}],13:[function(require,module,exports){

exports.timeline_arts_functions = function ($routeParams,$http,Timeline,$rootScope) {
	
	

  return {
  
     get_events: function() {
      return $http.get("https://script.google.com/macros/s/AKfycbzij_r2bTK6fiWU-h29rglHktd8pwbLfrti82Or68TkEjEHrOc/exec?id=1VsSxPQ6rGrP3FWdveX3wwdUlnB1t_Sk2NG6aE0kX92M");  //1. this returns promise
    },
  
  
  
  	add_events: function (eventss, fn){
	
								
									  var visevents = new vis.DataSet();
									var self=this
									


							
										var today = new Date()
												var names=[];
												var name=[];
												var lastname="";
												var start_date="";
												var start_date="";
												var oldName="";
												var lastfrom_date="";
												var lastto_date="";
												var mylastfrom_date
												var currentStartDate;
												
												tempdates=[]
										
												console.log('artsxxxxx',eventss)
												$.each(eventss.data.Sheet1, function( index, event ) {	
																						
													start_date=moment(event.Event_Start)._d 
													end_date=moment(event.Event_End)._d

													if($rootScope.added_track_groups.indexOf("Arts and Events")==-1){	
														$rootScope.added_track_groups.push("Arts and Events")	
														$rootScope.track_groups.push({"track":"Arts and Events"})
													}
													
													var htmlContent =  self.event_html(event.Event_Title,false,"",start_date,end_date,"")
													select_group = false
													if($routeParams.track){
													select_group = false
													if($routeParams.track=="Arts and Events"){
													select_group = true
													}
													}
														visevents.add( {content:htmlContent ,
																		select_group:select_group,
																		group:event.Event_Location || "NA",
																		group_id:event.Event_Location+"Arts and Events" || "NA",
																		id:event.id,
																		name:event.Event_Title  ,
																		event_type:"Arts and Events",
																		track:"Arts and Events",
																		order: "Arts and Events",
																		subgroup: event.name,
																		start:start_date,
																		end:end_date,
																		className 	:	"green"//,
																		//notes:event.Event_Description
																		})
																	
														
												//}
														
														
														})
													
													
										  					
										
										return	fn(visevents)
									
								
									
								
												
								
		
		
		},
  
   		 event_html: function(name,showimage,image,start_date,end_date,notes ){
			var notes=notes ||""
				var htmlContent = '<div class="titlediv" >'
																htmlContent+='<div class="title_heading">'
																htmlContent+=name
																htmlContent+='</div>';
																htmlContent+="<span> ";
																htmlContent+=start_date;
																htmlContent+="<span>";
																htmlContent+="<p>"+notes
																
																if(showimage){
																	htmlContent+='<div class="image_box">'
																	htmlContent+='<img src="http://museums.bristol.gov.uk/multimedia/entry.php?request=resource&irn='+image +'&height=50&format=jpeg" />'
																	htmlContent+='</div>'	
																}													
													htmlContent+= '</div>'
													
			return htmlContent

			},

	
	updateOptions: function(options){

		timeline.setOptions(options)
			
				
	},
	updateItem: function(options){
		options.id=$rootScope.selected_t_id
		timeline.itemsData.getDataSet().update(options)
		
				
	},
	/*
    setup: function(Timeline,groups,dates) {
	var self=this
	
   function prettyConfirm(title, text, callback) {
                swal({
                    title: title,
                    text: text,
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55"
                }, callback);
            }

            function prettyPrompt(title, text, inputValue, callback) {
                swal({
                    title: title,
                    text: text,
                    type: 'input',
                    showCancelButton: true,
                    inputValue: inputValue
                }, callback);
            }
			
			 function selected_data(event) {
			
			
						$rootScope.selected_t_id=event.items[0]
						$rootScope.selected =timeline.itemsData.getDataSet().get(event.items[0])
						$rootScope.selected_item=$rootScope.selected.name
						$rootScope.selected_notes=$rootScope.selected.notes
						$rootScope.datePicker.date={startDate:new Date($rootScope.selected.start),endDate:new Date ($rootScope.selected.end)}
						$rootScope.selected_id=$rootScope.selected._id
					
	
            }

            function logEvent(event, properties) {
                var log = document.getElementById('log');
                var msg = document.createElement('div');
                //msg.innerHTML = 'event=' + JSON.stringify(event) + ', ' +
                  //  'properties=' + JSON.stringify(properties);
               // log.firstChild ? log.insertBefore(msg, log.firstChild) : log.appendChild(msg);
            }
        

  var container = document.getElementById('example-timeline');
  
  		 function loadgroups(items){
	
			var _groups=[]
			var addednames=[]
			 _.each(items._data, function(value) {
			
			if(value.start_date!="0000-00-00" && value.end_date!="0000-00-00"&& value.start_date!="" &&value.end_date!=""&&value.project_name!=""){
				
				if($.inArray(value.group, addednames)==-1){
					addednames.push(value.group)
					//n.b. may be able to order groups when locatiobn hierarchy given in emu
					content=value.group ||"NA"
					if( value.group=="Temporary Exhibition Gallery"){ content="M SHED: "+value.group}
					if( value.group=="Window on Bristol"){ content="M SHED: "+value.group}
					if( value.group=="First Floor Foyer"){ content="M SHED: "+value.group}
					
					 _groups.push({
										id			:	value.group,
										display		:	'shown',
										event_type	:	value.event_type,
										content		:   content,
										event_typeSORT	: content
									})
				}
				}
			})

			
			return _groups		

		}
		var self = this
		
			$("body").keydown(function(e) {
			 // e.preventDefault();
        //e.returnValue = false;
				  if(e.keyCode == 37) { // left
					move( 0.2);
				  }
				  else if(e.keyCode == 39) { // right
					move(-0.2); 
				  }
				  else if(e.keyCode == 38) { // right
					zoom(-0.2); 
				  }
				  else if(e.keyCode == 40) { // right
					zoom(0.2); 
					
					    return false;
				  }
				});
				
				


                timeline = new vis.Timeline(container);
				groups=loadgroups(dates)
				$rootScope.groups=groups
				var groups = new vis.DataSet(groups);
				
               // timeline.setGroups(groups);
				$rootScope.changeGroups=function(selected){
				
					var selection = []
					selection=$rootScope.myGroup.selected
				
					var list = groups.get({
						filter: function(item) {
							return (item.id in selection && selection[item.id]==item.id);
						}
					})
						timeline.setGroups(list);
						enable_event_drop()
				}
						
				var list = groups.get({
						filter: function(item) {
							return (item.display == "shown");
						}
				})
					
				timeline.setGroups(list);
					$rootScope.myGroup = {
					selected:{}
				};
				
			
		
				 
                timeline.setItems(dates);
                timeline.setOptions(options);
				timeline.fit()
				
				timeline.on('select', function (properties) {
						selected_data( properties)

				});
										
			move=function(percentage) {
				var range = this.timeline.getWindow();
				var interval = range.end - range.start;
				this.timeline.setWindow({
					start: range.start.valueOf() - interval * percentage,
					end:   range.end.valueOf()   - interval * percentage
				});
			}

  
			zoom=function(percentage) {
				var range = this.timeline.getWindow();
				var interval = range.end - range.start;
				this.timeline.setWindow({
					start: range.start.valueOf() - interval * percentage,
					end:   range.end.valueOf()   + interval * percentage
				});
			}

			// attach events to the navigation buttons
			zoomIn=function () { this.zoom(-0.2); }
			zoomOut=function () {  this.zoom( 0.2); }
			moveLeft=function () {  this.move( 0.2); }
			moveRight=function () {  this.move(-0.2); }

                dates.on('*', function(event, properties) {
                    logEvent(event, properties);
                });

			enable_event_drop=function(event){
		
                $(".vis-group").droppable({
                    accept: '.date_add',
                    drop: function(event, ui) {

                        if (!$('.already-dropped').length) {
                            $('body').addClass('already-dropped');
                            setTimeout(function() {
                                $('.already-dropped').removeClass('already-dropped');
                            }, 100);
                            event.preventDefault()
                          time=(timeline.getEventProperties(event).time)
						group=(timeline.getEventProperties(event).group)
                            $(ui.draggable[0]).hide()
							
							if(ui.draggable[0].innerHTML=="PROVISIONAL DATE"){
                            prettyPrompt('Add item', 'Enter text content for new item:',"", function(value) {
                            if (value) {
                               	add_item(group,time,value,"blue",30)
							}
							})
							}
							else
							{
								add_item(group,time,ui.draggable[0].innerHTML,"red",7)
							}
							
							function add_item(group,time,value,colour,days){
							 date_dropped=(moment(time).startOf('day')._d)
							
                            var id = ui.draggable[0].id
                            var dateDroppedOn =time
                            target_date = time
							
                            var new_date = {
                                content: value,
								name:value,
                                group: group,
                                className:colour||"",
                                start_date: new Date(moment(date_dropped).startOf('day')._d),
                                end_date: new Date (moment(date_dropped).add(days, 'days')._d)

                            }
                            var _timeline = new Timeline(new_date)
                                .$save(function(_item) {
                                    new_date.start = new Date(_item.start_date)
									type:ui.draggable[0].innerHTML,
                                    new_date.end = new Date(_item.end_date)
                                    new_date._id = _item._id

                                    timeline.itemsData.getDataSet().add(new_date)
									console.log(new_date)
                                    setTimeout(function() {
                                        $(ui.draggable[0]).show()
                                    }, 1 * 1000);

                                });
							
							
							}
                        }



                    }
                })
				}
				enable_event_drop()
              
    }
	*/ 
  };
}

},{}],14:[function(require,module,exports){
exports.timeline_controller=     function($scope, $http, $q, $routeParams, $location,
         $location, $rootScope, trello, get_trello_board, date_calc, Todos, Timeline, Team, kiosk_activity,timeline_functions,timeline_leave_functions,timeline_holidays_functions,timeline_learning_functions,timeline_loans_functions,timeline_events_functions,timeline_arts_functions,emu_stats_functions,timeline_shopify_functions
    ) {
		
		

	
	$scope.average_install_length = 0
	$scope.locked=[]
	$scope.unlock=false
	$scope.password=false
	$scope.lockstatus=true
	$scope.locked['true']={status:" locked",value:false}
	$scope.locked['false']={status:" unlocked",value:true}
	$scope.average_derig_length = 0
 $rootScope.addednames=[]
	
	$rootScope.track_groups=[]
	
	
	 $rootScope.added_track_groups=[]	
	
	
	$rootScope.datePicker=[];
	$rootScope.datePicker.date = {startDate:null, endDate: null};
	
$scope.dateRangeOptions = {
        locale : {
            format : 'DD/MM/YYYY'
        },
        eventHandlers : {
            'apply.daterangepicker' : function() {  
               date=$rootScope.datePicker.date
			   	days=timeline_functions.days(moment(date.startDate),moment(date.endDate))
				
				
			   if(date){
			//if($rootScope.selected_t_id==event.items[0]){	
					html=timeline_functions.event_html($scope.selected_item,"","",moment(date.startDate).format("MMM Do YYYY") , moment(date.endDate).format("MMM Do YYYY")|| "",$rootScope.selected_notes + "(" +days+" days)" )
					var options={id:$scope.selected_timeline_id,content:html,start:moment(date.startDate)._d,end:moment(date.endDate)._d,start_date:moment(date.startDate)._d,end_date:moment(date.endDate)._d}
					Timeline.update({
					id: $scope.selected_id,				
					}, options);				
					timeline_functions.updateItem(options)
	
		
			}}				
            }
        }
    
				$scope.$watch('selected_notes', function(selected_note) {

					date=$rootScope.datePicker.date
					days=timeline_functions.days(moment(date.startDate),moment(date.endDate))
			
					html=timeline_functions.event_html($scope.selected_item,"","",moment(date.startDate).format("MMM Do YYYY") , moment(date.endDate).format("MMM Do YYYY")|| "",selected_note,days)
					var options={id:$scope.selected_timeline_id,content:html,notes:selected_note}
					Timeline.update({
					id: $scope.selected_id,				
					}, options);				
					timeline_functions.updateItem(options)
	
			})
			
		
			
			$scope.$watch('selected_item', function(selected_item) {

			date=$rootScope.datePicker.date
			days=timeline_functions.days(moment(date.startDate),moment(date.endDate))
			//if($rootScope.selected_t_id==event.items[0]){	
					html=timeline_functions.event_html(selected_item,"","",moment(date.startDate).format("MMM Do YYYY") , moment(date.endDate).format("MMM Do YYYY")|| "",$rootScope.selected_notes ,days)
					var options={id:$scope.selected_timeline_id,content:html,name:selected_item}
					Timeline.update({
					id: $scope.selected_id,				
					}, options);				
					timeline_functions.updateItem(options)
	
			})
	 
	$scope.$watch('stack', function(stack) {
		
		
		 if(typeof(stack)!="undefined"){
			 
			   options={stack:stack}
		timeline_functions.updateOptions(options)
		  }
        })

        $scope.editing = [];
        $scope.timeline = Timeline.query();


		
		
        $scope.removeTimeline = function(id) {
            Timeline.remove({
                id: id
            })
        }
        Timeline.query({}, function(team) {
            _.each(team, function(row,index) {
		
		 
		 var timeline = $scope.timeline[index];
		 if(timeline.group=="Bristol Archives"){
            Timeline.remove({
                id: timeline._id
            }, function() {
               // $scope.timeline.splice(index, 1);
            });
			}
			
            })
        })
		
	
        $scope.save = function() {
		
            if (!$scope.newTimeline || $scope.newTimeline.length < 1) return;
            var timeline = new Timeline({
                name: $scope.newTimeline,
                completed: false
            });

            timeline.$save(function() {
		
                $scope.timeline.push(timeline);
                $scope.newTimeline = ''; // clear textbox
            });
        }

        $scope.update = function(index) {
            var timeline = $scope.timeline[index];
            Timeline.update({
                id: timeline._id
            }, timeline);
            $scope.editing[index] = false;
        }

        $scope.edit = function(index) {
            $scope.editing[index] = angular.copy($scope.timeline[index]);
        }

        $scope.cancel = function(index) {
            $scope.timeline[index] = angular.copy($scope.editing[index]);
            $scope.editing[index] = false;
        }

        $scope.remove = function(index) {
            var timeline = $scope.timeline[index];
            Timeline.remove({
                id: timeline._id
            }, function() {
                $scope.timeline.splice(index, 1);
            });
        }

        $scope.datePicker = "";
        $scope.datePicker.date = {
            startDate: null,
            endDate: null
        };
        $scope.machine_types = [];
        $scope.type = "all";
        $scope.changedValue = function(type) {
            $scope.data = []
            $scope.series = []
            $scope.category = []
            $scope.type = type
            plot_graph()
        }


        $scope.machinesx = ["all"]
        $scope.filterCondition = {
            machine: 'neq'
        }
        $scope.$watch('type', function(type) {
            $scope.machinesx = ["all"]


        })

  

        $scope.$watch('machine', function() {



            })
            // selected fruits
        $scope.machine_types_selection = [];



        $scope.categories = [];

        // selected fruits
        $scope.category_selection = [];




        var _data = [];
        $scope.data = []
        $scope.day_data = []
        $scope.team = [];
        $scope.labels = $scope.team
        $scope.chart_title = "Machine activity"

        var timeline

     

            var groups = new vis.DataSet();
            var dates = new vis.DataSet();
			var dates = new vis.DataSet();
			var second_dates = new vis.DataSet();
            var all_groups = []
            var i = 0

      

      install_days_tally = 0
	  install_instance_tally=0 
	  derig_tally = 0
	 derig_days_tally=0
            Timeline.query({}, function(team) {
			 
                _.each(team, function(data) {
				
				
				data.days=timeline_functions.days(data.start_date,data.end_date)
					var end_date
                    if ( data.group != "") {
						if( data.start_date!=""){
					if(typeof(data.end_date)!="undefined"){
						end_date=(moment(data.end_date).format("MMM Do YY"))
						}
						if(data._type=="INSTALL"){
						install_instance_tally++
						 install_days_tally +=data.days
						}
						else if(data._type=="DERIG"){
						derig_tally++						
						  derig_days_tally +=data.days
						  }
						if( 	$rootScope.added_track_groups.indexOf(data._type)==-1){	
						
						 $rootScope.added_track_groups.push(data._type)
						  //	$rootScope.track_groups.push({"track":data._type})
						}
							
							
						   second_dates.add({
								_id: data._id,
								className:data.className,
								select_group :false,
								name:data.name,
								_type:data._type,
								track:data._type,
								content: timeline_functions.event_html(data.name,"","",moment(data.start_date).format("MMM Do YY") , end_date ||"",data.notes ,data.days),
								group: data.group||"NA",
								order:data._type,
								notes: data.notes,
								title:data.notes,
								start: data.start_date,
								days:data.days,
								end: data.end_date 
							})
						}
                    }
                })
			  timeline_functions.get_events().then(function(data) {
			  			
			var checked_event_types=[]
			
			if($("#add_emu_exhibitions").is(':checked')){
				
				checked_event_types.push('Exhibition')
				checked_event_types.push('Gallery')
				
			}
		
			
			//if($("#whats_on").is(':checked')){
				checked_event_types.push('Family')
				checked_event_types.push('Tour')
				checked_event_types.push('Walk')
				checked_event_types.push('Rides')
				checked_event_types.push('Tours')
				checked_event_types.push('Talk')
				checked_event_types.push('Lecture')
				checked_event_types.push('Special Event')
				checked_event_types.push('Event')
				
			//}
			
			   _.each(data.data, function(events) {
			   _.each(events, function(event) {
												
											//if( event.startDate!=""){
												
											//if( checked_event_types.indexOf(event.type)>=0){	
											if( event.type=="Exhibition"||event.type=="Gallery"){
											var end_date=new Date(event.endDate)
											
											if(event.endDate==""||event.endDate==event.startDate){
										
											var end_date=new Date(event.startDate)
											//end_date.setDate(end_date.getDate() + 1)
										
											}
											var group =	"NA"
											if( event.type=="Exhibition"||event.type=="Gallery"){
											 group =	event.event_space||"NA" 
											}
											else{
												 group =	event.type ||"NA"
											}
													
												var eventimages = false
												if(event.images[0]){
												eventimages=event.images[0].irn
												}
												var htmlContent =  timeline_functions.event_html(event.name,true&&event.images[0],eventimages,event.startDate,event.endDate)
													if( 	$rootScope.added_track_groups.indexOf(event.venue)==-1){
												$rootScope.added_track_groups.push(event.venue)														
													$rootScope.track_groups.push({"track":event.venue})
													}
													select_group = true
													if($routeParams.track){
													select_group = false
													if($routeParams.track=="Arts and Events"){
													//select_group = true
													}
													}
													
													
													dates.add({
																		group		:	group, 
																		select_group :select_group,
																		title		:	event.name,
																		name:event.name,
																		type		: "background",
																		content		:	htmlContent,
																		order:event.venue+event.event_space,
																		track:event.venue,
																		start		:	new Date(event.startDate), 
																		end			:	event.endDate, 
																		className 	:	"green",
																		event_type  :   "WHATS ON"
																		})
																		
											//}
											}

			  })
			    })
			
			_.each(second_dates._data, function(date) {
			dates.add(date)
			})
			$scope.total_install_derig=install_days_tally+derig_days_tally
			$scope.average_install_length=Math.round(install_days_tally/install_instance_tally)
			$scope.average_derig_length=Math.round(derig_days_tally/derig_tally)
				  timeline_functions.setup(Timeline,groups,dates)
				  
				

	$scope.team_leave()
	$scope.public_events()
	$scope.learning_bookings()
	$scope.loans()
	$scope.whatson()
	$scope.arts()
	$scope.emu_stats_functions()
	$scope.timeline_shopify_functions()
	
		$scope.$watch('lockstatus', function (status) {
		
  timeline_functions.prettyPrompt('say the magic word', '',"", function(value) {
	
                            if (value!="" && md5(value)=="f1a81d782dea6a19bdca383bffe68452") {
								$scope.unlock=true
	timeline_functions.unlock(true)
							}
							else
							{
							//$scope.lockstatus=true	
								$scope.unlock=false
							timeline_functions.unlock(false)
								
							}
  })
		
  }, true);
	
	$scope.$watch('track_groups|filter:{selected:true}', function (nv) {
    var selection = nv.map(function (track_groups) {
      return track_groups.track;
    });
	timeline_functions.changeTracks(selection)
	$( ".draggable,.iconbar" ).css({ 'top':'0px' });
  }, true);
	
		 $scope.$watch('groups|filter:{selected:true}', function (nv) {
    var selection = nv.map(function (group) {
      return group.content;
    });
	timeline_functions.changeGroups(selection)
	$( ".draggable,.iconbar" ).css({ 'top':'0px' });
  }, true);
			
            })
			
		$scope.exportCSV= function(){
		data_to_export=$rootScope.timeline.itemsData.getDataSet()
		
		visibles=$rootScope.timeline.getVisibleItems()
		events=[]
		
		  _.each(data_to_export._data, function(event,index) {
		
		  if(visibles.indexOf(event.id)!=-1){
		  console.log("in")
		  var _event ={  
						 id			:event.id,
						 name		:event.name,
						 start_date	:moment(event.start).format("DD/MM/YYYY"),
						 end_date	:moment(event.end).format("DD/MM/YYYY"),
					     event_type	:event.track
					   
						}
			 events.push(_event)
				}
		  
		   
		  
		  })
				
		timeline_functions.export_JSON_to_CSV(events, "Timeline dates", true)
	}
	$scope.leaveChanged= function(leave){
				
		
	}
	

				
			$scope.team_leave= function(){
			//reset
			// $rootScope.timeline.setItems($rootScope.rawData);
			 var groups =$rootScope.groups
			 
			  $rootScope.timeline.setGroups(groups);
			  
				  timeline_leave_functions.get_eventss().then(function(data) {
					 
						timeline_leave_functions.add_leave(data, function(leave_dates){
							 
							 $rootScope.leave_groups = timeline_functions.loadgroups(leave_dates)
							 
						
						
							_.each($rootScope.leave_groups, function(_group) {
								
								$rootScope.groups.push(_group)
							})
							
							
							 _.each(leave_dates._data, function(date) {
								$rootScope.timeline.itemsData.getDataSet().add(date)
							})
						})
					})
			
			}
				$scope.loans= function(){
			
			 var groups =$rootScope.groups
			 
			  $rootScope.timeline.setGroups(groups);
			  
				  timeline_loans_functions.get_events().then(function(datax) {
					
						timeline_loans_functions.add_events(datax, function(public_dates){
							
							 $rootScope.leave_groups = timeline_functions.loadgroups(public_dates)
							 
						
						
							_.each($rootScope.leave_groups, function(_group) {
								
								$rootScope.groups.push(_group)
							})
							
							 console.log('$rootScope.groups',$rootScope.groups)
							 _.each(public_dates._data, function(date) {
								$rootScope.timeline.itemsData.getDataSet().add(date)
							})
						})
					})
			
			}
			
				$scope.arts= function(){
			
			 var groups =$rootScope.groups
			 
			  $rootScope.timeline.setGroups(groups);
			  
				  timeline_arts_functions.get_events().then(function(datax) {
					
						timeline_arts_functions.add_events(datax, function(public_dates){
							
							 $rootScope.leave_groups = timeline_functions.loadgroups(public_dates)
							_.each($rootScope.leave_groups, function(_group) {
								
								$rootScope.groups.push(_group)
							})
							
							 console.log('arts',$rootScope.groups)
							 _.each(public_dates._data, function(date) {
								$rootScope.timeline.itemsData.getDataSet().add(date)
							})
						})
					})
			
			}
			
			
			$scope.timeline_shopify_functions= function(){
			
			 var groups =$rootScope.groups
			 
			  $rootScope.timeline.setGroups(groups);
			  
				  timeline_shopify_functions.get_events().then(function(datax) {
					
						timeline_shopify_functions.add_events(datax, function(public_dates){
							
							 $rootScope.leave_groups = timeline_functions.loadgroups(public_dates)
							 
						
						
							_.each($rootScope.leave_groups, function(_group) {
								
								$rootScope.groups.push(_group)
							})
							
							 console.log('$rootScope.groups',$rootScope.groups)
							 _.each(public_dates._data, function(date) {
								$rootScope.timeline.itemsData.getDataSet().add(date)
							})
						})
					})
			
			}	
			$scope.emu_stats_functions= function(){
			
			 var groups =$rootScope.groups
			 
			  $rootScope.timeline.setGroups(groups);
			  
				  emu_stats_functions.get_events().then(function(datax) {
					
						emu_stats_functions.add_events(datax, function(public_dates){
							
							 $rootScope.leave_groups = timeline_functions.loadgroups(public_dates)
							 
						
						
							_.each($rootScope.leave_groups, function(_group) {
								
								$rootScope.groups.push(_group)
							})
							
							 console.log('$rootScope.groups',$rootScope.groups)
							 _.each(public_dates._data, function(date) {
								$rootScope.timeline.itemsData.getDataSet().add(date)
							})
						})
					})
			
			}
			
			
			$scope.learning_bookings= function(){
			
			 var groups =$rootScope.groups
			 
			  $rootScope.timeline.setGroups(groups);
			  
				  timeline_learning_functions.get_events().then(function(datax) {
					
						timeline_learning_functions.add_events(datax, function(public_dates){
							
							 $rootScope.leave_groups = timeline_functions.loadgroups(public_dates)
							 
						
						
							_.each($rootScope.leave_groups, function(_group) {
								
								$rootScope.groups.push(_group)
							})
							
							 console.log('$rootScope.groups',$rootScope.groups)
							 _.each(public_dates._data, function(date) {
								$rootScope.timeline.itemsData.getDataSet().add(date)
							})
						})
					})
			
			}
			
					$scope.whatson= function(){
			
			 var groups =$rootScope.groups
			 
			  $rootScope.timeline.setGroups(groups);
			  
				  timeline_events_functions.get_events().then(function(datax) {
					
						timeline_events_functions.add_events(datax, function(public_dates){
							
							 $rootScope.leave_groups = timeline_functions.loadgroups(public_dates)
							 
						
						
							_.each($rootScope.leave_groups, function(_group) {
								
								$rootScope.groups.push(_group)
							})
							
							 console.log('$rootScope.groups',$rootScope.groups)
							 _.each(public_dates._data, function(date) {
								$rootScope.timeline.itemsData.getDataSet().add(date)
							})
						})
					})
			
			}
			
			
					$scope.public_events= function(){
			
			 var groups =$rootScope.groups
			 
			  $rootScope.timeline.setGroups(groups);
			  
				  timeline_holidays_functions.get_events().then(function(datax) {
					
						timeline_holidays_functions.add_hols(datax, function(public_dates){
							
							 $rootScope.leave_groups = timeline_functions.loadgroups(public_dates)
							 
						
						
							_.each($rootScope.leave_groups, function(_group) {
								
								$rootScope.groups.push(_group)
							})
							
							 console.log('$rootScope.groups',$rootScope.groups)
							 _.each(public_dates._data, function(date) {
								$rootScope.timeline.itemsData.getDataSet().add(date)
							})
						})
					})
			
			}
  
		       
            $scope.list1 = {
                title: 'PROVISIONAL DATE'
            };
            $scope.list2 = {
                title: 'INSTALL'
            };
            $scope.list3 = {
                title: 'DERIG'
            };

            $scope.onDropComplete = function(data, evt) {
                // console.log("drop success, data:", data);
            }
			
		


        })

    };

},{}],15:[function(require,module,exports){

exports.emu_stats_functions = function ($http,Timeline,$rootScope) {
	
	

  return {
  
     get_events: function() {

	   return $http.get('http://museums.bristol.gov.uk/sync/data/stats.JSON');  //1. this returns  this returns 
    },
  

  	add_events: function (eventss, fn){
	
							
									var visevents = new vis.DataSet();
									var self=this
										var today = new Date()
												
												tempdates=[]
											if( $rootScope.added_track_groups.indexOf("emu stats")==-1){
												$rootScope.added_track_groups.push("emu stats")	
												$rootScope.track_groups.push({"track":"emu stats"})
											}
										var scale_class = "scale_01"
										
										
									
										
										
												$.each(eventss.data.stats, function( index, event ) {	
												
												
												if(event.value>0&&event.value<=10){scale_class="scale_01"}
												if(event.value>10&&event.value<=100){scale_class="scale_02"}
												if(event.value>100&&event.value<=500){scale_class="scale_03"}
												if(event.value>500&&event.value<=1000){scale_class="scale_04"}
												if(event.value>1000&&event.value<=2000){scale_class="scale_05"}
												if(event.value>2000&&event.value<=3000){scale_class="scale_06"}
												if(event.value>3000&&event.value<=4000){scale_class="scale_07"}
												if(event.value>4000&&event.value<=5000){scale_class="scale_08"}
												if(event.value>5000&&event.value<=10000){scale_class="scale_09"}
												if(event.value>10000){scale_class="scale_10"}
												
												
																	end_date=new Date(event.date) 
																	end_date.setDate( end_date.getDate() + 1);
																						
														visevents.add( {content:" ",
														title:event.value+ " records " + event.action,
																		name:"" ,
																		group:event.module,
																		group_id:event.module,
																		event_type:"emu stats",
																		track:"emu stats",
																		order: "emu stats",
																		className:scale_class,
																		start:event.start_date,
																		end:event.end_date,
																		subgroup:event.action,
																		notes 	:	""
															})
															
															
																		
															
																	
												})
														
														
													
													
										  					
										
										return	fn(visevents)

		},
  
  
  
	
	updateOptions: function(options){

		timeline.setOptions(options)
			
				
	},
	updateItem: function(options){
		options.id=$rootScope.selected_t_id
		timeline.itemsData.getDataSet().update(options)
		
				
	},
	
  };
}

},{}],16:[function(require,module,exports){

exports.timeline_events_functions = function ($http,Timeline,$rootScope) {


  return {
  
    get_events: function() {
      return $http.get('http://museums.bristol.gov.uk/sync/data/events.JSON');  //1. this returns promise
    },
  
  
  
  	add_events: function (eventss, fn){
											var checked_event_types=[]
											checked_event_types.push('Tour')
											checked_event_types.push('Walk')
											checked_event_types.push('Rides')
											checked_event_types.push('Tours')
											checked_event_types.push('Talk')
											checked_event_types.push('Lecture')
											checked_event_types.push('Special Event')
											checked_event_types.push('Event')
											checked_event_types.push('Family')

								
											var visevents = new vis.DataSet();
											var self=this
											var today = new Date()
											
									$.each(eventss.data.events, function( index, eventx ) {					
												
											var end_date=new Date(eventx.endDate)
											
											if(eventx.endDate==""||eventx.endDate==eventx.startDate){
										
											var end_date=new Date(eventx.startDate)
											end_date.setDate(end_date.getDate() + 1)
										
											}
										
											var event_image=false
											var event_image_irn
											if(eventx.images){
											if(eventx.images[0]){
												event_image=true
												event_image_irn=eventx.images[0].irn
												}
											}
												
											var htmlContent =  self.event_html(eventx.name,event_image,event_image_irn,eventx.startDate,eventx.endDate)
										
											if($rootScope.added_track_groups.indexOf("What's On")==-1){
												$rootScope.added_track_groups.push("What's On")	
												$rootScope.track_groups.push({"track":"What's On"})
											}
													if(eventx['type']!="" && checked_event_types.indexOf(eventx.type)!=-1 && new Date(eventx.startDate)){
										
													visevents.add({
																		group		:	eventx.type||"NA" , 
																		group_id		:	eventx.type+"What's On"||"NA" , 
																		select_group :false,
																		title		:	eventx.name,
																		name:eventx.name,
																		type		: "background",
																		content		:	htmlContent,
																		order		:"What's On",
																		track		:"What's On",
																		start		:	new Date(eventx.startDate), 
																		end			:	end_date, 
																		className 	:	"green",
																		event_type  :   "What's On"
												})
												}
																		
											//}
											
											
											})	
			
											
											
											
											
											
										
														
														
													
													
										  					
										
										return	fn(visevents)

		},

   		 event_html: function(name,showimage,image,start_date,end_date,notes ){
			var notes=notes ||""
				var htmlContent = '<div class="titlediv" >'
																htmlContent+='<div class="title_heading">'
																htmlContent+=name
																htmlContent+='</div>';
																htmlContent+="<span> ";
																htmlContent+=start_date+ "-" + end_date;
																htmlContent+="<span>";
																htmlContent+="<p>"+notes
																
																if(showimage){
																	htmlContent+='<div class="image_box">'
																	htmlContent+='<img src="http://museums.bristol.gov.uk/multimedia/entry.php?request=resource&irn='+image +'&height=50&format=jpeg" />'
																	htmlContent+='</div>'	
																}													
													htmlContent+= '</div>'
													
			return htmlContent

			},
  
	
	updateOptions: function(options){

		timeline.setOptions(options)
			
				
	},
	updateItem: function(options){
		options.id=$rootScope.selected_t_id
		timeline.itemsData.getDataSet().update(options)
		
				
	},
	
  };
}

},{}],17:[function(require,module,exports){

exports.timeline_holidays_functions = function ($http,Timeline,$rootScope) {

  return {
  
     get_events: function() {
		 
		 /*
		 'https://www.googleapis.com/calendar/v3/calendars/en.uk#holiday@group.v.calendar.google.com/events?key=AIzaSyDi8arJr4JvnETpZVylXUVpxZDyBHNkQyk';
				  */
				  
		 	 var SheetToJSONServiceURL = "https://www.gov.uk/bank-holidays.json"
			 
			 
			 console.log(SheetToJSONServiceURL)
			 
      return $http.get(SheetToJSONServiceURL);  //1. this returns promise
    },
  
  
  
  	add_hols: function (eventss, fn){
	
								
									var visevents = new vis.DataSet();
									var self=this
										var today = new Date()
												var names=[];
												var name=[];
												var lastname="";
												var start_date="";
												var start_date="";
												var oldName="";
												var lastfrom_date="";
												var lastto_date="";
												var mylastfrom_date
												var currentStartDate;
												
												tempdates=[]
											if( 	$rootScope.added_track_groups.indexOf("public holidays")==-1){
												$rootScope.added_track_groups.push("public holidays")														
													$rootScope.track_groups.push({"track":"public holidays"})
													}
												
												$.each(eventss.data['england-and-wales'].events, function( index, event ) {	
																	end_date=new Date(event.date) 
																	end_date.setDate( end_date.getDate() + 1);
														if(	event.title!=""){											
														visevents.add( {content:event.title  ,
																		name:event.title  ,
																		group:"public holidays",
																		group_id:"public holidays"+"public holidays",
																		//id:event.id,
																		event_type:"public holidays",
																		track:"public holidays",
																		order: "public holidays",
																		className:"blue",
																		start:event.date,
																		end:end_date,
																		subgroup:"na",
																		notes 	:	event.notes
																		})
																		}
																		/*
																		group:value.group,
																		id:value.id,
																		event_type:"leave",
																		track:"leave",
																		order: "leave",
																		subgroup: value.name,
																		start:value.start_date,
																		end:value.end_date,
																		className 	:	"orange"
																		*/
																	
												})
														
														
													
													
										  					
										
										return	fn(visevents)

		},
  
   		 event_html: function(name,showimage,image,start_date,end_date,notes ){
			var notes=notes ||""
				var htmlContent = '<div class="titlediv" >'
																htmlContent+='<div class="title_heading">'
																htmlContent+=name
																htmlContent+='</div>';
																htmlContent+="<span> ";
																htmlContent+=start_date+ "-" + end_date;
																htmlContent+="<span>";
																htmlContent+="<p>"+notes
																
																if(showimage){
																	htmlContent+='<div class="image_box">'
																	htmlContent+='<img src="http://museums.bristol.gov.uk/multimedia/entry.php?request=resource&irn='+image +'&height=50&format=jpeg" />'
																	htmlContent+='</div>'	
																}													
													htmlContent+= '</div>'
													
			return htmlContent

			},
  
	
	updateOptions: function(options){

		timeline.setOptions(options)
			
				
	},
	updateItem: function(options){
		options.id=$rootScope.selected_t_id
		timeline.itemsData.getDataSet().update(options)
		
				
	},
	
  };
}

},{}],18:[function(require,module,exports){

exports.timeline_learning_functions = function ($http,Timeline,$rootScope) {
	
	

  return {
  
     get_events: function() {
		 
		 /*
		 'https://www.googleapis.com/calendar/v3/calendars/en.uk#holiday@group.v.calendar.google.com/events?key=AIzaSyDi8arJr4JvnETpZVylXUVpxZDyBHNkQyk';
				  */
				  
		 	 var SheetToJSONServiceURL = "http://emudev-app1/~brlsmp4/learning/scripts/php/api/api.php?table=bookings"
			 
			 
			 console.log(SheetToJSONServiceURL)
			 
      return $http.get(SheetToJSONServiceURL);  //1. this returns promise
    },
  
  
  
  	add_events: function (eventss, fn){
	
								
									var visevents = new vis.DataSet();
									var self=this
										var today = new Date()
												var names=[];
												var name=[];
												var lastname="";
												var start_date="";
												var start_date="";
												var oldName="";
												var lastfrom_date="";
												var lastto_date="";
												var mylastfrom_date
												var currentStartDate;
												
												tempdates=[]
											if( 	$rootScope.added_track_groups.indexOf("school visits")==-1){
												$rootScope.added_track_groups.push("school visits")														
													$rootScope.track_groups.push({"track":"school visits"})
													}
												console.log('eventss',eventss)
												$.each(eventss.data, function( index, event ) {	
																	end_date=new Date(event.event_date) 
																	end_date.setDate( end_date.getDate() + 1);
														if(	event.school_name!=""){											
														visevents.add( {content:event.school_name  ,
																		name:event.school_name  ,
																		group:event.site,
																		group_id:event.site+"school visits",
																		//id:event.id,
																		event_type:"public holidays",
																		track:"school visits",
																		order: "school visits",
																		className:"orange",
																		start:event.event_date,
																		end:end_date,
																		subgroup:"na",
																		notes 	:	event.booking_form_info
																		})
																		}
															
																	
												})
														
														
													
													
										  					
										
										return	fn(visevents)

		},
  
   		 event_html: function(name,showimage,image,start_date,end_date,notes ){
			var notes=notes ||""
				var htmlContent = '<div class="titlediv" >'
																htmlContent+='<div class="title_heading">'
																htmlContent+=name
																htmlContent+='</div>';
																htmlContent+="<span> ";
																htmlContent+=start_date+ "-" + end_date;
																htmlContent+="<span>";
																htmlContent+="<p>"+notes
																
																if(showimage){
																	htmlContent+='<div class="image_box">'
																	htmlContent+='<img src="http://museums.bristol.gov.uk/multimedia/entry.php?request=resource&irn='+image +'&height=50&format=jpeg" />'
																	htmlContent+='</div>'	
																}													
													htmlContent+= '</div>'
													
			return htmlContent

			},
  
	
	updateOptions: function(options){

		timeline.setOptions(options)
			
				
	},
	updateItem: function(options){
		options.id=$rootScope.selected_t_id
		timeline.itemsData.getDataSet().update(options)
		
				
	},
	
  };
}

},{}],19:[function(require,module,exports){

exports.timeline_leave_functions =  function ($http,Timeline,$rootScope) {

  return {
  
     get_eventss: function() {
      return $http.get("https://script.google.com/macros/s/AKfycbzij_r2bTK6fiWU-h29rglHktd8pwbLfrti82Or68TkEjEHrOc/exec?id=1v69qKCc-8FYx8VuKPZMr1QkTMfJsh7qZTZJ7q7o3YTg");  //1. this returns promise
    },
  
  
  
  	add_leave: function (eventss, fn){
	
								
									  var visevents = new vis.DataSet();
									var self=this
									


							
										var today = new Date()
												var names=[];
												var name=[];
												var lastname="";
												var start_date="";
												var start_date="";
												var oldName="";
												var lastfrom_date="";
												var lastto_date="";
												var mylastfrom_date
												var currentStartDate;
												
												tempdates=[]
										
												
												$.each(eventss.data.tally, function( index, leave_record ) {	
																						
															if(leave_record.NAME!=oldName){
																	if(name.start_date!=""){
																	
																			names.push(name)
																			name=[]
																	}
																			oldName =leave_record.NAME
																			lastfrom_date=leave_record.DATE
																			 mylastfrom_date = new Date(leave_record.DATE);
																			name.start_date= new Date(leave_record.DATE);
																			name.name=leave_record.NAME
																			name.group=leave_record.TYPE
																			
																			
																			var end_date = new Date(lastfrom_date);
																			end_date.setDate(end_date.getDate() + 1);
																			name.end_date=end_date
																	
															}else
															{			
																														
														
															    //where dates are consecutive
																if(new Date(mylastfrom_date) - new Date(leave_record.DATE)==-86400000)	{
																	 mylastfrom_date = new Date(leave_record.DATE);
																	 
																	name.end_date=new Date(leave_record.DATE) 
																	name.end_date.setDate( name.end_date.getDate() + 1);
																}
																else{
																
																names.push(name)
																name=[]	
																name.name=leave_record.NAME
																name.group=leave_record.TYPE
																name.start_date=new Date(leave_record.DATE)	
																var non_consecutive_end_date = new Date(leave_record.DATE);
																name.end_date=non_consecutive_end_date.setDate( non_consecutive_end_date.getDate() + 1);
																
																
																}
	
																	
															}
																				
																
												})
										  

												$.each(names, function( index, value ) {
												
											
											
											
												if(value.name!=""){
													if(value.start_date){
														
														
												/*
												if($("#av_leave").is(':checked') && value.group=="CONTENT DESIGN" ||
												$("#user_research_leave").is(':checked') && value.group=="USER RESEARCH"  ||
												$("#digital_manager_leave").is(':checked') && value.group=="MANAGER"  ||
												$("#digitisation_leave").is(':checked') && value.group=="DIGITISATION"  ||
												$("#technicians_leave").is(':checked') && value.group=="TECHNICIAN"  
												){		
												*/
													if( 	$rootScope.added_track_groups.indexOf("leave")==-1){	
													 $rootScope.added_track_groups.push("leave")	
												$rootScope.track_groups.push({"track":"leave"})
													}
														visevents.add( {content:value.name  ,
																		group:value.group,
																		group_id:value.group+"leave",
																		id:value.id,
																		name:value.name  ,
																		event_type:"leave",
																		track:"leave",
																		order: "leave",
																		subgroup: value.name,
																		start:value.start_date,
																		end:value.end_date,
																		className 	:	"orange"
																		})
																	
														
												//}
														}
														}
														})
													
													
										  					
										
										return	fn(visevents)
									
								
									
								
												
								
		
		
		},
  
   		 event_html: function(name,showimage,image,start_date,end_date,notes ){
			var notes=notes ||""
				var htmlContent = '<div class="titlediv" >'
																htmlContent+='<div class="title_heading">'
																htmlContent+=name
																htmlContent+='</div>';
																htmlContent+="<span> ";
																htmlContent+=start_date+ "-" + end_date;
																htmlContent+="<span>";
																htmlContent+="<p>"+notes
																
																if(showimage){
																	htmlContent+='<div class="image_box">'
																	htmlContent+='<img src="http://museums.bristol.gov.uk/multimedia/entry.php?request=resource&irn='+image +'&height=50&format=jpeg" />'
																	htmlContent+='</div>'	
																}													
													htmlContent+= '</div>'
													
			return htmlContent

			},
   get_events: function() {
      return $http.get('http://museums.bristol.gov.uk/sync/data/events.JSON');  //1. this returns promise
    },
	
	updateOptions: function(options){

		timeline.setOptions(options)
			
				
	},
	updateItem: function(options){
		options.id=$rootScope.selected_t_id
		timeline.itemsData.getDataSet().update(options)
		
				
	},
	/*
    setup: function(Timeline,groups,dates) {
	var self=this
	
   function prettyConfirm(title, text, callback) {
                swal({
                    title: title,
                    text: text,
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55"
                }, callback);
            }

            function prettyPrompt(title, text, inputValue, callback) {
                swal({
                    title: title,
                    text: text,
                    type: 'input',
                    showCancelButton: true,
                    inputValue: inputValue
                }, callback);
            }
			
			 function selected_data(event) {
			
			
						$rootScope.selected_t_id=event.items[0]
						$rootScope.selected =timeline.itemsData.getDataSet().get(event.items[0])
						$rootScope.selected_item=$rootScope.selected.name
						$rootScope.selected_notes=$rootScope.selected.notes
						$rootScope.datePicker.date={startDate:new Date($rootScope.selected.start),endDate:new Date ($rootScope.selected.end)}
						$rootScope.selected_id=$rootScope.selected._id
					
	
            }

            function logEvent(event, properties) {
                var log = document.getElementById('log');
                var msg = document.createElement('div');
                //msg.innerHTML = 'event=' + JSON.stringify(event) + ', ' +
                  //  'properties=' + JSON.stringify(properties);
               // log.firstChild ? log.insertBefore(msg, log.firstChild) : log.appendChild(msg);
            }
        

  var container = document.getElementById('example-timeline');
  
  		 function loadgroups(items){
	
			var _groups=[]
			var addednames=[]
			 _.each(items._data, function(value) {
			
			if(value.start_date!="0000-00-00" && value.end_date!="0000-00-00"&& value.start_date!="" &&value.end_date!=""&&value.project_name!=""){
				
				if($.inArray(value.group, addednames)==-1){
					addednames.push(value.group)
					//n.b. may be able to order groups when locatiobn hierarchy given in emu
					content=value.group ||"NA"
					if( value.group=="Temporary Exhibition Gallery"){ content="M SHED: "+value.group}
					if( value.group=="Window on Bristol"){ content="M SHED: "+value.group}
					if( value.group=="First Floor Foyer"){ content="M SHED: "+value.group}
					
					 _groups.push({
										id			:	value.group,
										display		:	'shown',
										event_type	:	value.event_type,
										content		:   content,
										event_typeSORT	: content
									})
				}
				}
			})

			
			return _groups		

		}
		var self = this
		
			$("body").keydown(function(e) {
			 // e.preventDefault();
        //e.returnValue = false;
				  if(e.keyCode == 37) { // left
					move( 0.2);
				  }
				  else if(e.keyCode == 39) { // right
					move(-0.2); 
				  }
				  else if(e.keyCode == 38) { // right
					zoom(-0.2); 
				  }
				  else if(e.keyCode == 40) { // right
					zoom(0.2); 
					
					    return false;
				  }
				});
				
				


                timeline = new vis.Timeline(container);
				groups=loadgroups(dates)
				$rootScope.groups=groups
				var groups = new vis.DataSet(groups);
				
               // timeline.setGroups(groups);
				$rootScope.changeGroups=function(selected){
				
					var selection = []
					selection=$rootScope.myGroup.selected
				
					var list = groups.get({
						filter: function(item) {
							return (item.id in selection && selection[item.id]==item.id);
						}
					})
						timeline.setGroups(list);
						enable_event_drop()
				}
						
				var list = groups.get({
						filter: function(item) {
							return (item.display == "shown");
						}
				})
					
				timeline.setGroups(list);
					$rootScope.myGroup = {
					selected:{}
				};
				
			
		
				 
                timeline.setItems(dates);
                timeline.setOptions(options);
				timeline.fit()
				
				timeline.on('select', function (properties) {
						selected_data( properties)

				});
										
			move=function(percentage) {
				var range = this.timeline.getWindow();
				var interval = range.end - range.start;
				this.timeline.setWindow({
					start: range.start.valueOf() - interval * percentage,
					end:   range.end.valueOf()   - interval * percentage
				});
			}

  
			zoom=function(percentage) {
				var range = this.timeline.getWindow();
				var interval = range.end - range.start;
				this.timeline.setWindow({
					start: range.start.valueOf() - interval * percentage,
					end:   range.end.valueOf()   + interval * percentage
				});
			}

			// attach events to the navigation buttons
			zoomIn=function () { this.zoom(-0.2); }
			zoomOut=function () {  this.zoom( 0.2); }
			moveLeft=function () {  this.move( 0.2); }
			moveRight=function () {  this.move(-0.2); }

                dates.on('*', function(event, properties) {
                    logEvent(event, properties);
                });

			enable_event_drop=function(event){
		
                $(".vis-group").droppable({
                    accept: '.date_add',
                    drop: function(event, ui) {

                        if (!$('.already-dropped').length) {
                            $('body').addClass('already-dropped');
                            setTimeout(function() {
                                $('.already-dropped').removeClass('already-dropped');
                            }, 100);
                            event.preventDefault()
                          time=(timeline.getEventProperties(event).time)
						group=(timeline.getEventProperties(event).group)
                            $(ui.draggable[0]).hide()
							
							if(ui.draggable[0].innerHTML=="PROVISIONAL DATE"){
                            prettyPrompt('Add item', 'Enter text content for new item:',"", function(value) {
                            if (value) {
                               	add_item(group,time,value,"blue",30)
							}
							})
							}
							else
							{
								add_item(group,time,ui.draggable[0].innerHTML,"red",7)
							}
							
							function add_item(group,time,value,colour,days){
							 date_dropped=(moment(time).startOf('day')._d)
							
                            var id = ui.draggable[0].id
                            var dateDroppedOn =time
                            target_date = time
							
                            var new_date = {
                                content: value,
								name:value,
                                group: group,
                                className:colour||"",
                                start_date: new Date(moment(date_dropped).startOf('day')._d),
                                end_date: new Date (moment(date_dropped).add(days, 'days')._d)

                            }
                            var _timeline = new Timeline(new_date)
                                .$save(function(_item) {
                                    new_date.start = new Date(_item.start_date)
									type:ui.draggable[0].innerHTML,
                                    new_date.end = new Date(_item.end_date)
                                    new_date._id = _item._id

                                    timeline.itemsData.getDataSet().add(new_date)
									console.log(new_date)
                                    setTimeout(function() {
                                        $(ui.draggable[0]).show()
                                    }, 1 * 1000);

                                });
							
							
							}
                        }



                    }
                })
				}
				enable_event_drop()
              
    }
	*/ 
  };
}

},{}],20:[function(require,module,exports){

exports.timeline_loans_functions =  function ($http,Timeline,$rootScope) {


  return {
  
     get_events: function() {
		 
		 /*
		 'https://www.googleapis.com/calendar/v3/calendars/en.uk#holiday@group.v.calendar.google.com/events?key=AIzaSyDi8arJr4JvnETpZVylXUVpxZDyBHNkQyk';
				  */
				  
		 	 var SheetToJSONServiceURL = "http://emudev-app1/team/digital/projects/scripts/php/emu/loans.php?start_date=2014-01-01"
			 
			 
			 console.log(SheetToJSONServiceURL)
			 
      return $http.get(SheetToJSONServiceURL);  //1. this returns promise
    },
  
  
  
  	add_events: function (eventss, fn){
	
								
									var visevents = new vis.DataSet();
									var self=this
										var today = new Date()
												var names=[];
												var name=[];
												var lastname="";
												var start_date="";
												var start_date="";
												var oldName="";
												var lastfrom_date="";
												var lastto_date="";
												var mylastfrom_date
												var currentStartDate;
												
												tempdates=[]
											if( 	$rootScope.added_track_groups.indexOf("loans")==-1){
												$rootScope.added_track_groups.push("loans")														
													$rootScope.track_groups.push({"track":"loans"})
													}
												console.log('eventss',eventss)
												$.each(eventss.data, function( index, event ) {	
																	start_date=new Date(event.start_date)
																	end_date=new Date(event.end_date) 																	
																	end_date.setDate( end_date.getDate() + 1);
														if(	event.title!="" && start_date!=""){											
														visevents.add( {content:event.title  ,
																		name:event.title  ,
																		group:event.direction,
																		//id:event.id,
																		event_type:"loans",
																		track:"loans",
																		order: "loans",
																		className:"green",
																		start:start_date,
																		end:end_date,
																		subgroup:"na",
																		notes 	:	event.event_type
																		})
																		}
															
																	
												})
														
														
													
													
										  					
										
										return	fn(visevents)

		},
  
   		 event_html: function(name,showimage,image,start_date,end_date,notes ){
			var notes=notes ||""
				var htmlContent = '<div class="titlediv" >'
																htmlContent+='<div class="title_heading">'
																htmlContent+=name
																htmlContent+='</div>';
																htmlContent+="<span> ";
																htmlContent+=start_date+ "-" + end_date;
																htmlContent+="<span>";
																htmlContent+="<p>"+notes
																
																if(showimage){
																	htmlContent+='<div class="image_box">'
																	htmlContent+='<img src="http://museums.bristol.gov.uk/multimedia/entry.php?request=resource&irn='+image +'&height=50&format=jpeg" />'
																	htmlContent+='</div>'	
																}													
													htmlContent+= '</div>'
													
			return htmlContent

			},
  
	
	updateOptions: function(options){

		timeline.setOptions(options)
			
				
	},
	updateItem: function(options){
		options.id=$rootScope.selected_t_id
		timeline.itemsData.getDataSet().update(options)
		
				
	},
	
  };
}

},{}],21:[function(require,module,exports){


exports.timeline_functions = function ($http,Timeline,$rootScope) {
	

  return {
  
  
  export_JSON_to_CSV: function(JSONData, ReportTitle, ShowLabel){
  
  
    //If JSONData is not an object then JSON.parse will parse the JSON string in an Object
    var arrData = typeof JSONData != 'object' ? JSON.parse(JSONData) : JSONData;
    console.log('arrData',arrData)
    var CSV = '';    
    //Set Report title in first row or line
    
    CSV += ReportTitle + '\r\n\n';

    //This condition will generate the Label/Header
    if (ShowLabel) {
        var row = "";
        
        //This loop will extract the label from 1st index of on array
        for (var index in arrData[0]) {
            // console.log('row += index',row += index)
            //Now convert each value to string and comma-seprated
            row += index + ',';
        }

        row = row.slice(0, -1);
        
        //append Label row with line break
        CSV += row + '\r\n';
    }
    
    //1st loop is to extract each row
    for (var i = 0; i < arrData.length; i++) {
        var row = "";
        
        //2nd loop will extract each column and convert it in string comma-seprated
        for (var index in arrData[i]) {
            row += '"' + arrData[i][index] + '",';
        }

        row.slice(0, row.length - 1);
        
        //add a line break after each row
        CSV += row + '\r\n';
    }

    if (CSV == '') {        
        alert("Invalid data");
        return;
    }   
    
    //Generate a file name
    var fileName = "MyReport_";
    //this will remove the blank-spaces from the title and replace it with an underscore
    fileName += ReportTitle.replace(/ /g,"_");   
    
    //Initialize file format you want csv or xls
    var uri = 'data:text/csv;charset=utf-8,' + escape(CSV);
    
    // Now the little tricky part.
    // you can use either>> window.open(uri);
    // but this will not work in some browsers
    // or you will not get the correct file extension    
    
    //this trick will generate a temp <a /> tag
    var link = document.createElement("a");    
    link.href = uri;
    
    //set the visibility hidden so it will not effect on your web-layout
    link.style = "visibility:hidden";
    link.download = fileName + ".csv";
    
    //this part will append the anchor tag and remove it after automatic click
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);


},
  
  
     prettyConfirm: function (title, text, callback) {
                swal({
                    title: title,
                    text: text,
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55"
                }, callback);
            },

           prettyPrompt: function (title, text, inputValue, callback) {
                swal({
                    title: title,
                    text: text,
                    type: 'input',
                    showCancelButton: true,
                    inputValue: inputValue
                }, callback);
            },
			
			
	

            logEvent:function(event, properties) {
                var log = document.getElementById('log');
                var msg = document.createElement('div');
                //msg.innerHTML = 'event=' + JSON.stringify(event) + ', ' +
                  //  'properties=' + JSON.stringify(properties);
               // log.firstChild ? log.insertBefore(msg, log.firstChild) : log.appendChild(msg);
            },
  
  enable_event_drop:function(event){
		var self = this
                $(".vis-group").droppable({
                    accept: '.date_add',
                    drop: function(event, ui) {

                        if (!$('.already-dropped').length) {
                            $('body').addClass('already-dropped');
                            setTimeout(function() {
                                $('.already-dropped').removeClass('already-dropped');
                            }, 100);
                            event.preventDefault()
                            time=(timeline.getEventProperties(event).time)
							group=(timeline.getEventProperties(event).group)
							//type=(timeline.getEventProperties(event).type)
                            $(ui.draggable[0]).hide()
							
							if(ui.draggable[0].innerHTML=="PROVISIONAL DATE"){
                            self.prettyPrompt('Add item', 'Enter text content for new item:',"", function(value) {
                            if (value) {
                               	add_item(group,time,value,"blue",30)
							}
							})
							}
							else
							{
								add_item(group,time,ui.draggable[0].innerHTML,"red",7)
							}
							
							function add_item(group,time,value,colour,days){
							 date_dropped=(moment(time).startOf('day')._d)
							
                            var id = ui.draggable[0].id
                            var dateDroppedOn =time
                            target_date = time
							_days=self.days(moment(date_dropped).startOf('day')._d,moment(date_dropped).add(days, 'days')._d)
                            var new_date = {
                                content: self.event_html(value,"","",moment(date_dropped).startOf('day')._d,moment(date_dropped).add(days, 'days')._d, "",_days),
								name:value,
                                group: group,
                                className:colour||"",
								_type:ui.draggable[0].innerHTML,
                                start_date: new Date(moment(date_dropped).startOf('day')._d),
                                end_date: new Date (moment(date_dropped).add(days, 'days')._d),
								days:_days

                            }
                            var _timeline = new Timeline(new_date)
                                .$save(function(_item) {
                                    new_date.start =_item.start_date
                                    new_date.end = _item.end_date
                                    new_date._id = _item._id
									new_date._type=ui.draggable[0].innerHTML,
                                    timeline.itemsData.getDataSet().add(new_date)
									
                                    setTimeout(function() {
                                        $(ui.draggable[0]).show()
                                    }, 1 * 1000);

                                });
							
							
							}
                        }



                    }
                })
				},
	  
	  unlock: function(unlock){
		
                          
								timeline.setOptions({'editable':unlock});
			
							
		  	
	  
	  },
	  
	   	changeTracks: function(selection){

				var groups = new vis.DataSet($rootScope.groups);
				var group = new vis.DataSet( $rootScope.leave_groups);
				var list =groups.get({
						filter: function(item) {
							
							return (  selection.indexOf(item.track)!=-1);
						}
					})
					
						timeline.setGroups(list);
						
					
						this.enable_event_drop()
		
				},  
		changeGroups: function(selection){

				var groups = new vis.DataSet($rootScope.groups);
				//var group = new vis.DataSet( $rootScope.leave_groups);
				var list =groups.get({
						filter: function(item) {
							
							return (  selection.indexOf(item.content)!=-1);
						}
					})
					
						timeline.setGroups(list);
						
					
						this.enable_event_drop()
		
				},
  
  
  days: function (start,end){
  
				var a = moment(start);
				var b = moment(end);
				return b.diff(a,'days');
  
  },
  
  		  loadgroups: function(items){
	
			var _groups=[]
			var addednames=[]
			
			 _.each(items._data, function(value) {
			
			if(value.start_date!="0000-00-00" && value.end_date!="0000-00-00"&& value.start_date!="" &&value.end_date!=""&&value.project_name!=""){
				
				if($.inArray(value.group, $rootScope.addednames)==-1 ){
					$rootScope.addednames.push(value.group)
					//n.b. may be able to order groups when locatiobn hierarchy given in emu
					content=value.group ||"NA"
					if( value.group.toLowerCase()=="temporary exhibition gallery"){ content="<b>M SHED:</b> "+value.group}
					if( value.group.toLowerCase()=="window on bristol"){ content="<b>M SHED:</b> "+value.group}
					if( value.group.toLowerCase()=="first floor foyer"){ content="<b>M SHED:</b> "+value.group}
					 
					 _groups.push({
										id				:	value.group,
										//display		:	'shown',
										track			:value.track,
										order:value.order,
										event_type		:	value.event_type,
										content			:   content,
										event_typeSORT	: content,
										 selected: value.select_group 
									})
				}
				}
			})

			console.log(_groups)
			return _groups		

		},
  
   		 event_html: function(name,showimage,image,start_date,end_date,notes ,days){
			var notes=notes ||""
				var htmlContent = '<div class="titlediv" >'
																htmlContent+='<div class="title_heading">'
																	if(showimage){
																	htmlContent+='<div class="image_box">'
																	htmlContent+='<img src="http://museums.bristol.gov.uk/multimedia/entry.php?request=resource&irn='+image +'&height=50&format=jpeg" />'
																	htmlContent+='</div>'	
																}	
																htmlContent+=name
																	if(days>0 &&end_date){
																		//htmlContent+='<div class="days">'
																		htmlContent+=" - "+ days + " days"
																		//htmlContent+='</div>';
																}
																htmlContent+='</div>';
																
																htmlContent+="<span> ";
																htmlContent+=start_date 
																if(end_date) {htmlContent+= "-" + end_date};
																htmlContent+="<span>";
																htmlContent+= '</div>'
																htmlContent+='<div class="notes">'
																htmlContent+="<p>"+notes
																
																											
													htmlContent+= '</div>'
													
			return htmlContent

			},
				selected_data:	 function (event) {
			 var self=this
			 //newly selected - get ID to update
					console.log('get ID to update')
					selected_timeline_id=event.items[0]
			//fetch the timeline dataSetitem 
					selected_item =	timeline.itemsData.getDataSet().get(selected_timeline_id)
			//update the data entry form
			console.log(selected_item)
			
			$rootScope.selected_timeline_id=selected_timeline_id
			$rootScope.selected_item=selected_item.name
			$rootScope.selected_type=selected_item._type
			if(selected_item.days>0){
			$rootScope.selected_days=" - " +selected_item.days + " days"
			}
			$rootScope.selected_id=selected_item._id
			$rootScope.selected_notes=selected_item.notes
			$rootScope.datePicker.date={startDate:new Date(selected_item.start),endDate:new Date (selected_item.end)}
			

            },
   get_events: function() {
      return $http.get('http://museums.bristol.gov.uk/sync/data/events.JSON');  //1. this returns promise
    },
	
	updateOptions: function(options){

		$rootScope.timeline.setOptions(options)
			
				
	},
	updateItem: function(options){
		if(typeof(timeline)!="undefined"){
		timeline.itemsData.getDataSet().update(options)
		}
			
	},
	
    setup: function(Timeline,groups,dates) {
	var self=this
	

         var options = {
					min: new Date(2014, 0, 1),                // lower limit of visible range
					max: new Date(2022, 0, 1),                // upper limit of visible range
					zoomMin: 1000 * 60 * 60 * 24,             // one day in milliseconds
					zoomMax: 1000 * 60 * 60 * 24 * 31 * 500 ,    // about six months in milliseconds
                    width: '100%',
					maxHeight:"900px",
					moveable:true,
					itemsAlwaysDraggable:true,
					
					 snap: function (date, scale, step) {
					return date;
				   },
						
					//groupEditable:true,
					stack:false,
					orientation:{"axis":"top"},
                    editable: false,  
					 groupOrder:'order',					
                    onMove: function(item, callback) {
$rootScope.datePicker.date={startDate:new Date(item.start),endDate:new Date (item.end)}
                        var _timeline = new Timeline({
                          //  content: item.content,
							 content:  self.event_html(item.name,"","",item.start, item.end,item.notes ),
                            group: item.group,
                            start_date: item.start,
                            end_date: item.end,
                            _id: item._id
                        })
                       
                        Timeline.update({
                            id: item._id
                        }, _timeline);

                        callback(item);

                    },
                    onUpdate: function(item, callback) {

                        self.prettyPrompt('Update item', 'Edit items text:', item.content, function(value) {
                            if (value) {
                                item.content = value;
                                callback(item); // send back adjusted item

									days=self.days(item.start, item.end)
                                var _timeline = new Timeline({
                                    content:  self.event_html(value,"","",item.start, item.end,item.notes ,days),
									name: item.name,
                                    group: item.group,
                                    start_date: item.start,
                                    end_date: item.end,
									days:self.days(item.start,item.end)

                                })
                               
                                Timeline.update({
                                    id: item._id
                                }, _timeline);
                                callback(item);
                            } else {
                                callback(null); // cancel updating the item
                            }
                        });

                    },
                    onAdd: function(item, callback) {


                        self.prettyPrompt('Add note', 'Add some notes to this date:', item.content, function(value) {
                            if (value) {
                                item.content = value;
                                callback(item); // send back adjusted new item
								
								days=self.days(item.start, moment(item.start).add(5, 'days'))
																		
     
                                var _timeline = new Timeline({
                                        content: self.event_html(value,"","",item.start, moment(item.start).add(5, 'days'),"" ,days),
										name:value,
                                        group: item.group,
										type:"note",
                                        start_date: item.start,
										className:"green"
                                       // end_date: moment(item.start).add(5, 'days'),
										//days:self.days(item.start, moment(item.start).add(5, 'days'))

                                    })
                                    .$save(function(_item) {
                                       // item.end = new Date(_item.end_date)
                                        item._id = _item._id
										  editable: true,
                                        //callback(item);
                                        console.log('add');
                                    });
                            } else {
                                callback(null); // cancel item creation
                            }
                        })


                    },
                    onRemove: function(item, callback) {

                        if (item._id) {
                            Timeline.remove({
                                id: item._id
                            })
                            callback(item);
                        } else {
                            sweetAlert('you can\'t remove this item from here, sorry :)')
                            return false;

                        }
                    }
                };

  var container = document.getElementById('example-timeline');
  
  
		var self = this
		
			$("body").keydown(function(e) {
			 // e.preventDefault();
        //e.returnValue = false;
				  if(e.keyCode == 37) { // left
					move( 0.2);
				  }
				  else if(e.keyCode == 39) { // right
					move(-0.2); 
				  }
				  else if(e.keyCode == 38) { // right
					zoom(-0.2); 
				  }
				  else if(e.keyCode == 40) { // right
					zoom(0.2); 
					
					    return false;
				  }
				});
				
				


                timeline = new vis.Timeline(container);
				groups=self.loadgroups(dates)
				$rootScope.rawData=dates
				$rootScope.groups=groups
				var groups = new vis.DataSet(groups);
				
           
						
				var list = groups.get({
						filter: function(item) {
							return (item);
						}
				})
					
				timeline.setGroups(list);
					$rootScope.myGroup = {
					selected:{}
				};
				$rootScope.groups=list
			
		
				 
                timeline.setItems(dates);
                timeline.setOptions(options);
				timeline.fit()
				
				//self.changeGroups($rootScope.groups.selected)
				
				timeline.on('select', function (properties) {
						self.selected_data( properties)

				});
				
				
					$rootScope.timeline=timeline					
			move=function(percentage) {
				var range = this.timeline.getWindow();
				var interval = range.end - range.start;
				this.timeline.setWindow({
					start: range.start.valueOf() - interval * percentage,
					end:   range.end.valueOf()   - interval * percentage
				});
			}

  
			zoom=function(percentage) {
				var range = this.timeline.getWindow();
				var interval = range.end - range.start;
				this.timeline.setWindow({
					start: range.start.valueOf() - interval * percentage,
					end:   range.end.valueOf()   + interval * percentage
				});
			}

			// attach events to the navigation buttons
			zoomIn=function () { this.zoom(-0.2); }
			zoomOut=function () {  this.zoom( 0.2); }
			moveLeft=function () {  this.move( 0.2); }
			moveRight=function () {  this.move(-0.2); }

                dates.on('*', function(event, properties) {
                    self.logEvent(event, properties);
                });

			
				self.enable_event_drop()
              
    }
	 
  };
}

},{}],22:[function(require,module,exports){

exports.timeline_shopify_functions =  function ($http,Timeline,$rootScope,$routeParams) {

  return {
  
     get_events: function() {
      return $http.get("https://script.google.com/macros/s/AKfycbzij_r2bTK6fiWU-h29rglHktd8pwbLfrti82Or68TkEjEHrOc/exec?id=1ENJ87VM90o15jcZ1yavlVf7F1fg4xePoluyrm2uWlgE");  //1. this returns promise
    },
  
  
  
  	add_events: function (eventss, fn){
	
								
									var visevents = new vis.DataSet();
									var self=this

										var today = new Date()
								
												$.each(eventss.data.pivot, function( index, event ) {	
												console.log('shopify')
												scale_class="";
												
												
												
												if(event.value >0 && event.value<=300){scale_class="scale_01"}
												
												if(event.value >300 && event.value<=600){scale_class="scale_02"}
												
												if(event.value >600 && event.value<=900){scale_class="scale_03"}
												
												if(event.value >900 && event.value<=1100){scale_class="scale_05"}

												if(event.value >1100 && event.value<=1200){scale_class="scale_06"}
												
												if(event.value >1200 && event.value<=1400){scale_class="scale_07"}
												
												if(event.value >1400 &&event.value<=1500){scale_class="scale_08"}
												if(event.value >1500 && event.value<=2000){scale_class="scale_09"}
												if(event.value >2000){scale_class="scale_10"}
																						
													start_date=moment(event.date)._d
									
													end_date=moment(event.date)._d
													end_date.setDate(end_date.getDate() + 1)
													if($rootScope.added_track_groups.indexOf("Shopify")==-1){	
														$rootScope.added_track_groups.push("Shopify")	
														$rootScope.track_groups.push({"track":"Shopify"})
													}
													
												
												
													select_group = false
													if($routeParams.track){
													select_group = false
													if($routeParams.track=="Shopify"){
													select_group = true
													}
													}
														visevents.add( {content:"" ,
																		select_group:select_group,
																		group:"Shopify"|| "NA",
																		group_id:"Shopify" || "NA",
																		//id:event.id,
																		name:event.value.toFixed(2)  ,
																		title:"£"+event.value.toFixed(2)  ,
																		event_type:"Shopify",
																		track:"Shopify",
																		order: "Shopify",
																		subgroup:"",
																		start:start_date,
																		end:end_date,
																		className 	:	scale_class//,
																		//notes:event.Event_Description
																		})
																	
														
												//}
														
														
														})
													
													
										  					
										
										return	fn(visevents)
									
								
									
								
												
								
		
		
		},
  
   		 event_html: function(name,showimage,image,start_date,end_date,notes ){
			var notes=notes ||""
				var htmlContent = '<div class="titlediv" >'
																htmlContent+='<div class="title_heading">'
																htmlContent+=name
																htmlContent+='</div>';
																htmlContent+="<span> ";
																htmlContent+=start_date+ "-" + end_date;
																htmlContent+="<span>";
																htmlContent+="<p>"+notes
																
																if(showimage){
																	htmlContent+='<div class="image_box">'
																	htmlContent+='<img src="http://museums.bristol.gov.uk/multimedia/entry.php?request=resource&irn='+image +'&height=50&format=jpeg" />'
																	htmlContent+='</div>'	
																}													
													htmlContent+= '</div>'
													
			return htmlContent

			},

	
	updateOptions: function(options){

		timeline.setOptions(options)
			
				
	},
	updateItem: function(options){
		options.id=$rootScope.selected_t_id
		timeline.itemsData.getDataSet().update(options)
		
				
	},
	/*
    setup: function(Timeline,groups,dates) {
	var self=this
	
   function prettyConfirm(title, text, callback) {
                swal({
                    title: title,
                    text: text,
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55"
                }, callback);
            }

            function prettyPrompt(title, text, inputValue, callback) {
                swal({
                    title: title,
                    text: text,
                    type: 'input',
                    showCancelButton: true,
                    inputValue: inputValue
                }, callback);
            }
			
			 function selected_data(event) {
			
			
						$rootScope.selected_t_id=event.items[0]
						$rootScope.selected =timeline.itemsData.getDataSet().get(event.items[0])
						$rootScope.selected_item=$rootScope.selected.name
						$rootScope.selected_notes=$rootScope.selected.notes
						$rootScope.datePicker.date={startDate:new Date($rootScope.selected.start),endDate:new Date ($rootScope.selected.end)}
						$rootScope.selected_id=$rootScope.selected._id
					
	
            }

            function logEvent(event, properties) {
                var log = document.getElementById('log');
                var msg = document.createElement('div');
                //msg.innerHTML = 'event=' + JSON.stringify(event) + ', ' +
                  //  'properties=' + JSON.stringify(properties);
               // log.firstChild ? log.insertBefore(msg, log.firstChild) : log.appendChild(msg);
            }
        

  var container = document.getElementById('example-timeline');
  
  		 function loadgroups(items){
	
			var _groups=[]
			var addednames=[]
			 _.each(items._data, function(value) {
			
			if(value.start_date!="0000-00-00" && value.end_date!="0000-00-00"&& value.start_date!="" &&value.end_date!=""&&value.project_name!=""){
				
				if($.inArray(value.group, addednames)==-1){
					addednames.push(value.group)
					//n.b. may be able to order groups when locatiobn hierarchy given in emu
					content=value.group ||"NA"
					if( value.group=="Temporary Exhibition Gallery"){ content="M SHED: "+value.group}
					if( value.group=="Window on Bristol"){ content="M SHED: "+value.group}
					if( value.group=="First Floor Foyer"){ content="M SHED: "+value.group}
					
					 _groups.push({
										id			:	value.group,
										display		:	'shown',
										event_type	:	value.event_type,
										content		:   content,
										event_typeSORT	: content
									})
				}
				}
			})

			
			return _groups		

		}
		var self = this
		
			$("body").keydown(function(e) {
			 // e.preventDefault();
        //e.returnValue = false;
				  if(e.keyCode == 37) { // left
					move( 0.2);
				  }
				  else if(e.keyCode == 39) { // right
					move(-0.2); 
				  }
				  else if(e.keyCode == 38) { // right
					zoom(-0.2); 
				  }
				  else if(e.keyCode == 40) { // right
					zoom(0.2); 
					
					    return false;
				  }
				});
				
				


                timeline = new vis.Timeline(container);
				groups=loadgroups(dates)
				$rootScope.groups=groups
				var groups = new vis.DataSet(groups);
				
               // timeline.setGroups(groups);
				$rootScope.changeGroups=function(selected){
				
					var selection = []
					selection=$rootScope.myGroup.selected
				
					var list = groups.get({
						filter: function(item) {
							return (item.id in selection && selection[item.id]==item.id);
						}
					})
						timeline.setGroups(list);
						enable_event_drop()
				}
						
				var list = groups.get({
						filter: function(item) {
							return (item.display == "shown");
						}
				})
					
				timeline.setGroups(list);
					$rootScope.myGroup = {
					selected:{}
				};
				
			
		
				 
                timeline.setItems(dates);
                timeline.setOptions(options);
				timeline.fit()
				
				timeline.on('select', function (properties) {
						selected_data( properties)

				});
										
			move=function(percentage) {
				var range = this.timeline.getWindow();
				var interval = range.end - range.start;
				this.timeline.setWindow({
					start: range.start.valueOf() - interval * percentage,
					end:   range.end.valueOf()   - interval * percentage
				});
			}

  
			zoom=function(percentage) {
				var range = this.timeline.getWindow();
				var interval = range.end - range.start;
				this.timeline.setWindow({
					start: range.start.valueOf() - interval * percentage,
					end:   range.end.valueOf()   + interval * percentage
				});
			}

			// attach events to the navigation buttons
			zoomIn=function () { this.zoom(-0.2); }
			zoomOut=function () {  this.zoom( 0.2); }
			moveLeft=function () {  this.move( 0.2); }
			moveRight=function () {  this.move(-0.2); }

                dates.on('*', function(event, properties) {
                    logEvent(event, properties);
                });

			enable_event_drop=function(event){
		
                $(".vis-group").droppable({
                    accept: '.date_add',
                    drop: function(event, ui) {

                        if (!$('.already-dropped').length) {
                            $('body').addClass('already-dropped');
                            setTimeout(function() {
                                $('.already-dropped').removeClass('already-dropped');
                            }, 100);
                            event.preventDefault()
                          time=(timeline.getEventProperties(event).time)
						group=(timeline.getEventProperties(event).group)
                            $(ui.draggable[0]).hide()
							
							if(ui.draggable[0].innerHTML=="PROVISIONAL DATE"){
                            prettyPrompt('Add item', 'Enter text content for new item:',"", function(value) {
                            if (value) {
                               	add_item(group,time,value,"blue",30)
							}
							})
							}
							else
							{
								add_item(group,time,ui.draggable[0].innerHTML,"red",7)
							}
							
							function add_item(group,time,value,colour,days){
							 date_dropped=(moment(time).startOf('day')._d)
							
                            var id = ui.draggable[0].id
                            var dateDroppedOn =time
                            target_date = time
							
                            var new_date = {
                                content: value,
								name:value,
                                group: group,
                                className:colour||"",
                                start_date: new Date(moment(date_dropped).startOf('day')._d),
                                end_date: new Date (moment(date_dropped).add(days, 'days')._d)

                            }
                            var _timeline = new Timeline(new_date)
                                .$save(function(_item) {
                                    new_date.start = new Date(_item.start_date)
									type:ui.draggable[0].innerHTML,
                                    new_date.end = new Date(_item.end_date)
                                    new_date._id = _item._id

                                    timeline.itemsData.getDataSet().add(new_date)
									console.log(new_date)
                                    setTimeout(function() {
                                        $(ui.draggable[0]).show()
                                    }, 1 * 1000);

                                });
							
							
							}
                        }



                    }
                })
				}
				enable_event_drop()
              
    }
	*/ 
  };
}

},{}],23:[function(require,module,exports){


exports.ProductDetailsController = function($scope, $routeParams, $http) {
  var encoded = encodeURIComponent($routeParams.id);

  $http.
    get('/api/v1/product/id/' + encoded).
    success(function(data) {
      $scope.product = data.product;
    });

  setTimeout(function() {
    $scope.$emit('ProductDetailsController');
  }, 0);
};

},{}],24:[function(require,module,exports){
'use strict';
/* app */
var underscore = angular.module('underscore', []);



underscore.factory('_', ['$window', function($window) {
  return $window._; // assumes underscore has already been loaded on the page
}]);
 
var controllers = require('../shared/controllers/controllers');
var dead_controllers = require('../components/machine-monitor/dead-controller');




var dashboard_controllers = require('../components/machine-monitor/dashboard-controller');
var feedback_controllers = require('../components/machine-monitor/feedback-controller');
var downtime_controllers = require('../components/machine-monitor/downtime-controller');


var app_controllers = require('../components/team/app-controllers');
var leave_controllers = require('../components/team/leave-controller');
var team_controllers = require('../components/team/team-controller');
var member_controllers = require('../components/member/member-controller');
var form_controllers = require('../components/team/form-controller');
var timeline_controllers = require('../components/timeline/timeline-controller');


var directives = require('../shared/directives/directives');
var data_services = require('../shared/services/data-services');
var app_services = require('../shared/services/app-services');

var timeline_services = require('../components/timeline/timeline-services');
var timeline_leave_services = require('../components/timeline/timeline-leave-services');
var timeline_shopify_functions = require('../components/timeline/timeline-shopify-services');



var timeline_emu_stats_services = require('../components/timeline/timeline-emu-stats-services');
var timeline_arts_services = require('../components/timeline/timeline-arts-services');
var timeline_events_services = require('../components/timeline/timeline-events-services');
var timeline_holidays_services = require('../components/timeline/timeline-holidays-services');
var timeline_learning_services = require('../components/timeline/timeline-learning-bookings-services');
var timeline_loans_services = require('../components/timeline/timeline-loans-services');

var downtime_services = require('../components/machine-monitor/downtime-services');
var feedback_services = require('../components/machine-monitor/feedback-services');
	var app =  angular.module('app', [
		'ngRoute',
		'ngResource',
		'ngSanitize',//,
		'angularUtils.directives.dirPagination',
		'underscore',//,
		'ngScrollbar',
		'ngMaterial',		
		'angularGrid',
		"ngSanitize",
		'formly', 
		'formlyBootstrap',
		"chart.js",
		'daterangepicker',
		'ngDragDrop',
		'md.data.table',
		'ui.router'
		])
		
		
	
	
_.each(controllers, function(controller, name) {
  app.controller(name, controller);
});

_.each(feedback_controllers, function(controller, name) {
  app.controller(name, controller);
});


_.each(dead_controllers, function(controller, name) {
  app.controller(name, controller);
});

_.each(downtime_controllers, function(controller, name) {
  app.controller(name, controller);
});



_.each(app_controllers, function(controller, name) {
  app.controller(name, controller);
});

_.each(leave_controllers, function(controller, name) {
  app.controller(name, controller);
});

_.each(team_controllers, function(controller, name) {
  app.controller(name, controller);
});

_.each(member_controllers, function(controller, name) {
  app.controller(name, controller);
});


_.each(form_controllers, function(controller, name) {
  app.controller(name, controller);
});
_.each(timeline_controllers, function(controller, name) {
  app.controller(name, controller);
});







 _.each(directives, function(directive, name) {
  app.directive(name, directive);
});





_.each(data_services, function(factory, name) {
  app.factory(name, factory);
});
_.each(app_services, function(factory, name) {
  app.factory(name, factory);
});
_.each(downtime_services, function(factory, name) {
  app.factory(name, factory);
});
_.each(feedback_services, function(factory, name) {
  app.factory(name, factory);
});
_.each(timeline_services, function(factory, name) {
  app.factory(name, factory);
});
_.each(timeline_leave_services, function(factory, name) {
  app.factory(name, factory);
});

_.each(timeline_shopify_functions, function(factory, name) {
  app.factory(name, factory);
});


_.each(timeline_emu_stats_services, function(factory, name) {
  app.factory(name, factory);
});



_.each(timeline_arts_services, function(factory, name) {
  app.factory(name, factory);
});
_.each(timeline_events_services, function(factory, name) {
  app.factory(name, factory);
});
_.each(timeline_holidays_services, function(factory, name) {
  app.factory(name, factory);
});
_.each(timeline_learning_services, function(factory, name) {
  app.factory(name, factory);
});
_.each(timeline_loans_services, function(factory, name) {
  app.factory(name, factory);
});


		  angular.module('app').filter('orderByDayNumber', function() {
  return function(items, field, reverse) {
    var filtered = [];
    angular.forEach(items, function(item) {
      filtered.push(item);
    });
    filtered.sort(function (a, b) {
      return (a[field] > b[field] ? 1 : -1);
    });
    if(reverse) filtered.reverse();
    return filtered;
  };
});








angular.module('app').config(["$locationProvider", function($locationProvider)
{
/*
$locationProvider.html5Mode({
  enabled: true,
  requireBase: false
});
*/

}]);






angular.module('app').config(function config(formlyConfigProvider) {


  formlyConfigProvider.setType([
  {
    name: 'radio',
	overwriteOk:true,
    templateUrl: 'views/formly-radio.html'
  },
  {
    name: 'button',
    templateUrl: '<button ng-click="options.templateOptions">{{options.label}}</button>'
  }
]);

  formlyConfigProvider.setType({
    name: 'input',
	overwriteOk:true,
    template: '<input class="form-control_CHEESE" ng-model="model[options.key]">',
    wrapper: ['helper', 'bootstrapLabel', 'bootstrapHasError']
  });
  

  
  formlyConfigProvider.setType({
    name: 'file',
     templateUrl: 'views/formly-file.html'
  });

});

},{"../components/machine-monitor/dashboard-controller":2,"../components/machine-monitor/dead-controller":3,"../components/machine-monitor/downtime-controller":4,"../components/machine-monitor/downtime-services":5,"../components/machine-monitor/feedback-controller":6,"../components/machine-monitor/feedback-services":7,"../components/member/member-controller":8,"../components/team/app-controllers":9,"../components/team/form-controller":10,"../components/team/leave-controller":11,"../components/team/team-controller":12,"../components/timeline/timeline-arts-services":13,"../components/timeline/timeline-controller":14,"../components/timeline/timeline-emu-stats-services":15,"../components/timeline/timeline-events-services":16,"../components/timeline/timeline-holidays-services":17,"../components/timeline/timeline-learning-bookings-services":18,"../components/timeline/timeline-leave-services":19,"../components/timeline/timeline-loans-services":20,"../components/timeline/timeline-services":21,"../components/timeline/timeline-shopify-services":22,"../shared/controllers/controllers":23,"../shared/directives/directives":25,"../shared/services/app-services":26,"../shared/services/data-services":27}],25:[function(require,module,exports){

	exports.userMenu = function() {
  return {
    controller: 'LoginController',
    templateUrl: './shared/templates/login_menu.html'
  }
	}

},{}],26:[function(require,module,exports){



exports.date_calc = function($http) {	
		

var date_calc = {};

var oneDay = 24*60*60*1000; // hours*minutes*seconds*milliseconds
var firstDate = new Date(2008,01,12);
var secondDate = new Date();

date_calc.diffDays  = function (firstDate) {
var firstDate = new Date(firstDate);
         return secondDate.getMonth() - firstDate.getMonth()
       + (12 * (secondDate.getFullYear() - firstDate.getFullYear()));

    };
	

    return date_calc;

}


    
exports.trello = function($http) {	

	

			var trello = {};
			trello.auth = function () {
		
				var authenticationSuccess = function() { 
				console.log("sucessful authentication");
				var token = Trello.token();
 // window.location.replace(decodeURIComponent(window.location.hash));
				console.log("Successful authentication");
				};
					var authenticationFailure = function() {alert("Failed authentication"); };

					 Trello.authorize({
					  type: 'redirect',
					  name: 'Bristol Culture Trello Monitor',
					  scope: {
						read: 'true',
						write: 'true' },
					  expiration: 'never',
					  success: authenticationSuccess,
					  error: authenticationFailure
					});
				

			};
			return trello;

}

exports.get_trello_board = function (Team,Tallys,date_calc,$http,$rootScope) {	


    var urlBase =  'https://trello.com/b/GHES2npy/tarantulas.json';
    var trello = []
	var trello_data=[]
    trello.get_data = function (listx) {
	
		//all lists	return  Trello.get("boards/56051e0244bb2e4efc9e6e97/lists", function(cards) {
			
		 return Trello.get("lists/"+listx.id+"/cards", function(cards) {
		 var list = []
			
					list._cards = []
                    tally = 0
                    card_count = 0
					
					
		   angular.forEach(cards, function(card, index) {
                        card_count++

                        card_to_print = {
                            name: card.name,
                            tint: 1 - date_calc.diffDays(card.dateLastActivity) / 10,
                            age: date_calc.diffDays(card.dateLastActivity).toString(),
                            dateLastActivity: card.dateLastActivity
                        }
                        tally += date_calc.diffDays(card.dateLastActivity)


                        list._cards.push(card_to_print)

                    });
				


                    list.average = (tally / card_count).toFixed(2)
                    list.tint = list.average / 100
                    list.card_count = card_count
                    list.points =  (card_count / (list.average/1 + 1)).toFixed(2)
					

					  Team.query({}, function(_team) {
							_.each(_team, function(row) {
								if(row.name==listx.title){
									
									   var tally = new Tallys({
										name: listx.title,
										date: new Date(),
										points: list.points
									});
									//$scope.tallys = Tallys.query();


									tally.$save();
					
					
										var team = Team.get({ id:row._id });
											  team.name= list.title
											  team.score=list.points
											  team.card_count=  list.card_count
											  team.bonus=""
											  teampenalty=list.average 
										$id = row._id;
										 Team.update({ id:$id }, team);
										$rootScope.message="update"	
								}
									
								});
						});
		 
		 console.log('end of service')
		 }).then(
			function (response){
				return response
				
			}
		 )
				
			

    };


		

    return trello;

}



exports.detect_dragging= function($rootScope) {


	
var detect_dragging=[]
 $rootScope.isDragging = false;
var currentPos = [];
detect_dragging.drag_handler= function(){
 $('md-content').on('mousedown', function (evt) {

   currentPos = [evt.pageX, evt.pageY]

 $('md-content').on('mousemove', function handler(evt) {

    currentPos=[evt.pageX, evt.pageY];
    $('#content-scroller').off('mousemove', handler);

  });

 $('md-content').on('mouseup', function handler(evt) {
	
    if(evt.pageX+ evt.pageY==currentPos[0]+currentPos[1]){
			console.log('clicking')
       $rootScope.isDragging = false;
	}
    else
	{
      $rootScope.isDragging = true;
		console.log('dragging')
	}
 $('md-content').off('mouseup', handler);
 
  });

});
}

/* App Module */

  return detect_dragging

}


exports.screen_saver_loop=function($rootScope,$location,$interval,Team) {

	



				//NB make sure any views called int he screensaver dont contain the screensaver service!
				 var sharedService = {};
				 

	var team_list=[]
	var support_list=[]
	var roadmap_list=[]
		var list=[]
	list.title="BMAG DIGITAL SUPPORT"
	list.id="56051e0244bb2e4efc9e6e99"	  
    support_list.push(list)
	
	var list=[]
	list.title="MSHED DIGITAL SUPPORT"
	list.id="562667caadda958dad274f22"	  
    support_list.push(list)
	
	var list=[]
	list.title="ZAHID"
	list.id="5257d4e719e0ee3b5800009c"	  
    team_list.push(list)
	
	var list=[]
	list.title="DARREN"
	list.id="55cdc7672fff3ffc946f6e94"	  
    team_list.push(list)
	
	var list=[]
	list.title="TOM"
	list.id="563234399bfcf125dc06f03b"	  
    team_list.push(list)	
		
		
	var list=[]
	list.title="LACEY"
	list.id="57f3b32311fbe4f9966de748"	  
    team_list.push(list)	

		
	var list=[]
	list.title="FAY"
	list.id="53344421ba92789d64cf8f99"	  
    team_list.push(list)
	
		var list=[]
	list.title="MARK"
	list.id="5790fb082acddb2d98c04826"	  
    team_list.push(list)
	
	var list=[]
	list.title="DAVID"
	list.id="52c3f521160978433b073a9b"	  
    team_list.push(list)
	
	
	
	
	var list=[]
	list.title="Q3"
	list.id="5763ca5d82c12dc42e874e0a"	  
   	  
    roadmap_list.push(list)
	
	var list=[]
	list.title="Q4"
	list.id="5763ca6c8981e9d4c9da0e23"	  
   


   roadmap_list.push(list)
	

	$rootScope.team=team_list
	$rootScope.support=support_list
	$rootScope.roadmap=roadmap_list
	
				 var currentView= ['/a/team','/a/support','/a/roadmap','/board']
				  $rootScope.i = 0
				 var timer
				 
				function switchview(i){
					
						 var videoElement = $('iframe').contents().find("video").get(0)
					
						if(!audioplayer ){var audioplayer=""}
						 var audioElement_not_playing = audioplayer.paused
						 

				if  ((!videoElement || videoElement.paused) && !audioplayer|| audioplayer.paused==true) {
					
			
						
						$rootScope.updateInterval 
						console.log(i)
						if(i>=screensaver.length){i=0;$rootScope.i=0}
						//app_start_log(kiosk,"SCREENSAVER")						
						$location.path( currentView[$rootScope.i])
						$rootScope.i++
					}
					else{
						
						console.log('video playing..cancel')
					}
					
						

				}

				//	$interval.cancel(timer);

				  sharedService.start_screen_saver = function() {
					
			
					  $interval.cancel($rootScope.timer );
					
					if($location.path()!="/screen_saver_images"){	
							$rootScope.screensaver_on=true
						
							$rootScope.timer = $interval(function() { switchview( $rootScope.i) }, 5   * 60*   1000)
					}
					
				  
				  };

				  sharedService.screensaverOff = function() {
						$rootScope.screensaver_on=false
					   $interval.cancel($rootScope.timer );
					   console.log('screensaver off')
					  
				
				   
				  };

				  return sharedService;
}
  
  



},{}],27:[function(require,module,exports){
var status = require('http-status');

exports.$user = function($http) {
  var s = {};

  s.loadUser = function() {
    $http.
      get('/api/v1/me').
      success(function(data) {
        s.user = data.user;
      }).
      error(function(data, $status) {
        if ($status === status.UNAUTHORIZED) {
          s.user = null;
        }
      });
  };

  s.loadUser();

  setInterval(s.loadUser, 60 * 60 * 1000);

  return s;
};



exports.Tallys = function($resource){
	

          return $resource('/tallys/:id', null, {
            'update': { method:'PUT' }
          });
 }
 
 exports.Timeline =  function($resource){
		
		 
          return $resource('/timeline/:id', null, {
            'update': { method:'PUT' }
          });
 }
 
 exports.delete_leave_by_id = function(Team,$rootScope){
 
 
 var delete_leave_by_id = {};
 
 
 delete_leave_by_id._delete  = function(leave_id){
 
 ids_to_delete=[]
 ids_to_delete.push(leave_id)
 
 		 Team.query({}, function(team) {
				_.each(team, function(_team,i) {
		
												console.log ('before',team[i].leave_taken)
												new_leave=[]
											new_ids=[]	
											_.each(team[i].leave_taken, function(leave_me,index) {
											
													if( ids_to_delete.indexOf(leave_me._id)==-1 && new_ids.indexOf(leave_me._id)==-1){
														new_leave.push(leave_me	)	
														new_ids.push(	leave_me._id)													
													 }
												
											})
							
											team[i].leave_taken=new_leave
											
											console.log ('after',team[i].leave_taken)
							
											Team.update({
											id:_team._id,				
											}, team[i]);
											
											$rootScope.me_Data=team[i]
							
							
		
		 
						
           
        
						
				})
			})
 
 
 }
 
  return delete_leave_by_id;
 }
 
 exports.Leave =  function($resource){
	  
		 
          return $resource('/leave/:id', null,
		  { 'get':    {method:'GET'},  // get individual record
			  'save':   {method:'POST'}, // create record
			  'query':  {method:'GET', isArray:true}, // get list all records
			  'remove': {method:'DELETE'}, // remove record
			    'update': { method:'PUT' },
			  'delete': {method:'DELETE'} // same, remove record
          });

  }
  
 exports.Timeline =  function($resource){
		
			 
          return $resource('/timeline/:id', null,
		  { 'get':    {method:'GET'},  // get individual record
			  'save':   {method:'POST'}, // create record
			  'query':  {method:'GET', isArray:true}, // get list all records
			  'remove': {method:'DELETE'}, // remove record
			    'update': { method:'PUT' },
			  'delete': {method:'DELETE'} // same, remove record
          });
}
		
 exports.Team =  function($resource){
	 
		 
          return $resource('/team/:id', null,
			{ 'get':    {method:'GET'},  // get individual record
			  'save':   {method:'POST'}, // create record
			  'query':  {method:'GET', isArray:true}, // get list all records
			  'remove': {method:'DELETE'}, // remove record
			    'update': { method:'PUT' },
			  'delete': {method:'DELETE'} // same, remove record
          });
 }
 
  exports.Todos =  function($resource){
        
        
          return $resource('/todos/:id', null, {
            'update': { method:'PUT' }
          });
  }
		
		
	
},{"http-status":1}]},{},[24]);
